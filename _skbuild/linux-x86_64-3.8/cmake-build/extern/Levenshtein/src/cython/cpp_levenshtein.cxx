/* Generated by Cython 3.0.0a10 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0a10"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000AA
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS 1
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cpp_levenshtein
#define __PYX_HAVE_API__cpp_levenshtein
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include "_levenshtein.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cpp_levenshtein.pyx",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_t_15cpp_levenshtein_OpcodeName;
typedef struct __pyx_t_15cpp_levenshtein_OpcodeName __pyx_t_15cpp_levenshtein_OpcodeName;

/* "cpp_levenshtein.pyx":72
 *     cdef LevEditOp* lev_editops_subtract(size_t n, const LevEditOp *ops, size_t ns, const LevEditOp *sub, size_t *nrem)
 * 
 * ctypedef struct OpcodeName:             # <<<<<<<<<<<<<<
 *     PyObject* pystring
 *     const char *cstring
 */
struct __pyx_t_15cpp_levenshtein_OpcodeName {
  PyObject *pystring;
  char const *cstring;
  size_t len;
};
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // !CYTHON_VECTORCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.stdlib" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.list" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.unicode" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.bytes" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.sequence" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.stddef" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpp_levenshtein" */
#if !CYTHON_USE_MODULE_STATE
#endif
static __pyx_t_15cpp_levenshtein_OpcodeName __pyx_v_15cpp_levenshtein_opcode_names[4];
static size_t __pyx_v_15cpp_levenshtein_N_OPCODE_NAMES;
static size_t __pyx_f_15cpp_levenshtein_get_length_of_anything(PyObject *); /*proto*/
static LevEditType __pyx_f_15cpp_levenshtein_string_to_edittype(PyObject *); /*proto*/
static LevEditOp *__pyx_f_15cpp_levenshtein_extract_editops(PyObject *); /*proto*/
static LevOpCode *__pyx_f_15cpp_levenshtein_extract_opcodes(PyObject *); /*proto*/
static PyObject *__pyx_f_15cpp_levenshtein_editops_to_tuple_list(size_t, LevEditOp *); /*proto*/
static PyObject *__pyx_f_15cpp_levenshtein_opcodes_to_tuple_list(size_t, LevOpCode *); /*proto*/
static PyObject *__pyx_f_15cpp_levenshtein_matching_blocks_to_tuple_list(size_t, size_t, size_t, LevMatchingBlock *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cpp_levenshtein"
extern int __pyx_module_is_main_cpp_levenshtein;
int __pyx_module_is_main_cpp_levenshtein = 0;

/* Implementation of "cpp_levenshtein" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
/* #### Code section: string_decls ### */
static const char __pyx_k_n[] = "n";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_nb[] = "nb";
static const char __pyx_k_nr[] = "nr";
static const char __pyx_k_ns[] = "ns";
static const char __pyx_k__14[] = ".";
static const char __pyx_k__27[] = "?";
static const char __pyx_k_len[] = "len";
static const char __pyx_k_nmb[] = "nmb";
static const char __pyx_k_ops[] = "ops";
static const char __pyx_k_arg1[] = "arg1";
static const char __pyx_k_arg2[] = "arg2";
static const char __pyx_k_arg3[] = "arg3";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_bops[] = "bops";
static const char __pyx_k_len1[] = "len1";
static const char __pyx_k_len2[] = "len2";
static const char __pyx_k_len3[] = "len3";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_orem[] = "orem";
static const char __pyx_k_osub[] = "osub";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_Editops[] = "Editops";
static const char __pyx_k_Opcodes[] = "Opcodes";
static const char __pyx_k_as_list[] = "as_list";
static const char __pyx_k_cstring[] = "cstring";
static const char __pyx_k_editops[] = "editops";
static const char __pyx_k_inverse[] = "inverse";
static const char __pyx_k_mblocks[] = "mblocks";
static const char __pyx_k_opcodes[] = "opcodes";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_string1[] = "string1";
static const char __pyx_k_string2[] = "string2";
static const char __pyx_k_pystring[] = "pystring";
static const char __pyx_k_RfEditops[] = "RfEditops";
static const char __pyx_k_RfOpcodes[] = "RfOpcodes";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_apply_edit[] = "apply_edit";
static const char __pyx_k_rf_editops[] = "rf_editops";
static const char __pyx_k_rf_opcodes[] = "rf_opcodes";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_subsequence[] = "subsequence";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_source_string[] = "source_string";
static const char __pyx_k_subtract_edit[] = "subtract_edit";
static const char __pyx_k_cpp_levenshtein[] = "cpp_levenshtein";
static const char __pyx_k_edit_operations[] = "edit_operations";
static const char __pyx_k_matching_blocks[] = "matching_blocks";
static const char __pyx_k_editops_line_266[] = "editops (line 266)";
static const char __pyx_k_inverse_line_212[] = "inverse (line 212)";
static const char __pyx_k_opcodes_line_309[] = "opcodes (line 309)";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_destination_string[] = "destination_string";
static const char __pyx_k_rapidfuzz_distance[] = "rapidfuzz.distance";
static const char __pyx_k_apply_edit_line_508[] = "apply_edit (line 508)";
static const char __pyx_k_subtract_edit_line_441[] = "subtract_edit (line 441)";
static const char __pyx_k_matching_blocks_line_354[] = "matching_blocks (line 354)";
static const char __pyx_k_rapidfuzz_distance_Levenshtein[] = "rapidfuzz.distance.Levenshtein";
static const char __pyx_k_Apply_a_sequence_of_edit_operat[] = "\n    Apply a sequence of edit operations to a string.\n    \n    apply_edit(edit_operations, source_string, destination_string)\n    \n    In the case of editops, the sequence can be arbitrary ordered subset\n    of the edit sequence transforming source_string to destination_string.\n    \n    Examples\n    --------\n    >>> e = editops('man', 'scotsman')\n    >>> apply_edit(e, 'man', 'scotsman')\n    'scotsman'\n    >>> apply_edit(e[:3], 'man', 'scotsman')\n    'scoman'\n    \n    The other form of edit operations, opcodes, is not very suitable for\n    such a tricks, because it has to always span over complete strings,\n    subsets can be created by carefully replacing blocks with 'equal'\n    blocks, or by enlarging 'equal' block at the expense of other blocks\n    and adjusting the other blocks accordingly.\n\n    >>> a, b = 'spam and eggs', 'foo and bar'\n    >>> e = opcodes(a, b)\n    >>> apply_edit(inverse(e), b, a)\n    'spam and eggs'\n    >>> e[4] = ('equal', 10, 13, 8, 11)\n    >>> e\n    [('delete', 0, 1, 0, 0), ('replace', 1, 4, 0, 3), ('equal', 4, 9, 3, 8), ('delete', 9, 10, 8, 8), ('equal', 10, 13, 8, 11)]\n    >>> apply_edit(e, a, b)\n    'foo and ggs'\n    ";
static const char __pyx_k_Find_identical_blocks_in_two_st[] = "\n    Find identical blocks in two strings.\n\n    Parameters\n    ----------\n    edit_operations : list[]\n        editops or opcodes created for the source and destination string\n    source_string : str | int\n        source string or the length of the source string\n    destination_string : str | int\n        destination string or the length of the destination string\n\n    Returns\n    -------\n    matching_blocks : list[]\n        List of triples with the same meaning as in SequenceMatcher's\n        get_matching_blocks() output.\n\n    Examples\n    --------\n    >>> a, b = 'spam', 'park'\n    >>> matching_blocks(editops(a, b), a, b)\n    [(1, 0, 2), (4, 4, 0)]\n    >>> matching_blocks(editops(a, b), len(a), len(b))\n    [(1, 0, 2), (4, 4, 0)]\n    \n    The last zero-length block is not an error, but it's there for\n    compatibility with difflib which always emits it.\n    \n    One can join the matching blocks to get two identical strings:\n\n    >>> a, b = 'dog kennels', 'mattresses'\n    >>> mb = matching_blocks(editops(a,b), a, b)\n    >>> ''.join([a[x[0]:x[0]+x[2]] for x in mb])\n    'ees'\n    >>> ''.join([b[x[1]:x[1]+x[2]] for x in mb])\n    'ees'\n    ";
static const char __pyx_k_Find_sequence_of_edit_operation[] = "\n    Find sequence of edit operations transforming one string to another.\n    \n    editops(source_string, destination_string)\n    editops(edit_operations, source_length, destination_length)\n    \n    The result is a list of triples (operation, spos, dpos), where\n    operation is one of 'equal', 'replace', 'insert', or 'delete';  spos\n    and dpos are position of characters in the first (source) and the\n    second (destination) strings.  These are operations on signle\n    characters.  In fact the returned list doesn't contain the 'equal',\n    but all the related functions accept both lists with and without\n    'equal's.\n    \n    Examples\n    --------\n    >>> editops('spam', 'park')\n    [('delete', 0, 0), ('insert', 3, 2), ('replace', 3, 3)]\n    \n    The alternate form editops(opcodes, source_string, destination_string)\n    can be used for conversion from opcodes (5-tuples) to editops (you can\n    pass strings or their lengths, it doesn't matter).\n    ";
static const char __pyx_k_Invert_the_sense_of_an_edit_ope[] = "\n    Invert the sense of an edit operation sequence.\n\n    In other words, it returns a list of edit operations transforming the\n    second (destination) string to the first (source).  It can be used\n    with both editops and opcodes.\n\n    Parameters\n    ----------\n    edit_operations : list[]\n        edit operations to invert\n\n    Returns\n    -------\n    edit_operations : list[]\n        inverted edit operations\n\n    Examples\n    --------\n    >>> inverse(editops('spam', 'park'))\n    [('insert', 0, 0), ('delete', 2, 3), ('replace', 3, 3)]\n    >>> editops('park', 'spam')\n    [('insert', 0, 0), ('delete', 2, 3), ('replace', 3, 3)]\n    ";
static const char __pyx_k_Subtract_an_edit_subsequence_fr[] = "\n    Subtract an edit subsequence from a sequence.\n    \n    subtract_edit(edit_operations, subsequence)\n    \n    The result is equivalent to\n    editops(apply_edit(subsequence, s1, s2), s2), except that is\n    constructed directly from the edit operations.  That is, if you apply\n    it to the result of subsequence application, you get the same final\n    string as from application complete edit_operations.  It may be not\n    identical, though (in amibuous cases, like insertion of a character\n    next to the same character).\n    \n    The subtracted subsequence must be an ordered subset of\n    edit_operations.\n    \n    Note this function does not accept difflib-style opcodes as no one in\n    his right mind wants to create subsequences from them.\n\n    Examples\n    --------\n    >>> e = editops('man', 'scotsman')\n    >>> e1 = e[:3]\n    >>> bastard = apply_edit(e1, 'man', 'scotsman')\n    >>> bastard\n    'scoman'\n    >>> apply_edit(subtract_edit(e, e1), bastard, 'scotsman')\n    'scotsman'\n    ";
static const char __pyx_k_apply_edit_expected_two_Strings[] = "apply_edit expected two Strings or two Unicodes";
static const char __pyx_k_home_danrui_Dataprep_pre_compil[] = "/home/danrui/Dataprep/pre_compile/dataprep/extern/Levenshtein/src/cython/cpp_levenshtein.pyx";
static const char __pyx_k_inverse_expected_a_list_of_edit[] = "inverse expected a list of edit operations";
static const char __pyx_k_matching_blocks_edit_operations[] = "matching_blocks edit operations are invalid or inapplicable";
static const char __pyx_k_matching_blocks_expected_a_list[] = "matching_blocks expected a list of edit operations";
static const char __pyx_k_apply_edit_edit_operations_are_i[] = "apply_edit edit operations are invalid or inapplicable";
static const char __pyx_k_apply_edit_first_argument_must_b[] = "apply_edit first argument must be a List of edit operations";
static const char __pyx_k_editops_second_and_third_argumen[] = "editops second and third argument must specify sizes";
static const char __pyx_k_matching_blocks_first_argument_m[] = "matching_blocks first argument must be a List of edit operations";
static const char __pyx_k_matching_blocks_second_and_third[] = "matching_blocks second and third argument must specify sizes";
static const char __pyx_k_opcodes_second_and_third_argumen[] = "opcodes second and third argument must specify sizes";
static const char __pyx_k_subtract_edit_expected_two_lists[] = "subtract_edit expected two lists of edit operations";
static const char __pyx_k_subtract_edit_subsequence_is_not[] = "subtract_edit subsequence is not a subsequence or is invalid";
static const char __pyx_k_Find_sequence_of_edit_operation_2[] = "\n    Find sequence of edit operations transforming one string to another.\n    \n    opcodes(source_string, destination_string)\n    opcodes(edit_operations, source_length, destination_length)\n    \n    The result is a list of 5-tuples with the same meaning as in\n    SequenceMatcher's get_opcodes() output.  But since the algorithms\n    differ, the actual sequences from Levenshtein and SequenceMatcher\n    may differ too.\n    \n    Examples\n    --------\n    >>> for x in opcodes('spam', 'park'):\n    ...     print(x)\n    ...\n    ('delete', 0, 1, 0, 0)\n    ('equal', 1, 3, 0, 2)\n    ('insert', 3, 3, 2, 3)\n    ('replace', 3, 4, 3, 4)\n    \n    The alternate form opcodes(editops, source_string, destination_string)\n    can be used for conversion from editops (triples) to opcodes (you can\n    pass strings or their lengths, it doesn't matter).\n    ";
static const char __pyx_k_apply_edit_first_argument_must_b_2[] = "apply_edit first argument must be a list of edit operations";
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_kp_u_Apply_a_sequence_of_edit_operat;
static PyObject *__pyx_n_s_Editops;
static PyObject *__pyx_kp_u_Find_identical_blocks_in_two_st;
static PyObject *__pyx_kp_u_Find_sequence_of_edit_operation;
static PyObject *__pyx_kp_u_Find_sequence_of_edit_operation_2;
static PyObject *__pyx_kp_u_Invert_the_sense_of_an_edit_ope;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_Opcodes;
static PyObject *__pyx_n_s_RfEditops;
static PyObject *__pyx_n_s_RfOpcodes;
static PyObject *__pyx_kp_u_Subtract_an_edit_subsequence_fr;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_n_s__27;
static PyObject *__pyx_n_s_apply_edit;
static PyObject *__pyx_kp_u_apply_edit_edit_operations_are_i;
static PyObject *__pyx_kp_u_apply_edit_expected_two_Strings;
static PyObject *__pyx_kp_u_apply_edit_first_argument_must_b;
static PyObject *__pyx_kp_u_apply_edit_first_argument_must_b_2;
static PyObject *__pyx_kp_u_apply_edit_line_508;
static PyObject *__pyx_n_s_arg1;
static PyObject *__pyx_n_s_arg2;
static PyObject *__pyx_n_s_arg3;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_list;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_bops;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cpp_levenshtein;
static PyObject *__pyx_n_s_cstring;
static PyObject *__pyx_n_u_delete;
static PyObject *__pyx_n_s_destination_string;
static PyObject *__pyx_n_s_edit_operations;
static PyObject *__pyx_n_s_editops;
static PyObject *__pyx_kp_u_editops_line_266;
static PyObject *__pyx_kp_u_editops_second_and_third_argumen;
static PyObject *__pyx_n_u_equal;
static PyObject *__pyx_kp_s_home_danrui_Dataprep_pre_compil;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_u_insert;
static PyObject *__pyx_n_s_inverse;
static PyObject *__pyx_kp_u_inverse_expected_a_list_of_edit;
static PyObject *__pyx_kp_u_inverse_line_212;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_len1;
static PyObject *__pyx_n_s_len2;
static PyObject *__pyx_n_s_len3;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matching_blocks;
static PyObject *__pyx_kp_u_matching_blocks_edit_operations;
static PyObject *__pyx_kp_u_matching_blocks_expected_a_list;
static PyObject *__pyx_kp_u_matching_blocks_first_argument_m;
static PyObject *__pyx_kp_u_matching_blocks_line_354;
static PyObject *__pyx_kp_u_matching_blocks_second_and_third;
static PyObject *__pyx_n_s_mblocks;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nb;
static PyObject *__pyx_n_s_nmb;
static PyObject *__pyx_n_s_nr;
static PyObject *__pyx_n_s_ns;
static PyObject *__pyx_n_s_opcodes;
static PyObject *__pyx_kp_u_opcodes_line_309;
static PyObject *__pyx_kp_u_opcodes_second_and_third_argumen;
static PyObject *__pyx_n_s_ops;
static PyObject *__pyx_n_s_orem;
static PyObject *__pyx_n_s_osub;
static PyObject *__pyx_n_s_pystring;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rapidfuzz_distance;
static PyObject *__pyx_n_s_rapidfuzz_distance_Levenshtein;
static PyObject *__pyx_n_u_replace;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_rf_editops;
static PyObject *__pyx_n_s_rf_opcodes;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_source_string;
static PyObject *__pyx_n_s_string1;
static PyObject *__pyx_n_s_string2;
static PyObject *__pyx_n_s_subsequence;
static PyObject *__pyx_n_s_subtract_edit;
static PyObject *__pyx_kp_u_subtract_edit_expected_two_lists;
static PyObject *__pyx_kp_u_subtract_edit_line_441;
static PyObject *__pyx_kp_u_subtract_edit_subsequence_is_not;
static PyObject *__pyx_n_s_test;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_15cpp_levenshtein_inverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations); /* proto */
static PyObject *__pyx_pf_15cpp_levenshtein_2editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_15cpp_levenshtein_4opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_15cpp_levenshtein_6matching_blocks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string); /* proto */
static PyObject *__pyx_pf_15cpp_levenshtein_8subtract_edit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_subsequence); /* proto */
static PyObject *__pyx_pf_15cpp_levenshtein_10apply_edit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string); /* proto */
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_int_0;
#endif
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_USE_MODULE_STATE
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyObject *__pyx_kp_u_Apply_a_sequence_of_edit_operat;
  PyObject *__pyx_n_s_Editops;
  PyObject *__pyx_kp_u_Find_identical_blocks_in_two_st;
  PyObject *__pyx_kp_u_Find_sequence_of_edit_operation;
  PyObject *__pyx_kp_u_Find_sequence_of_edit_operation_2;
  PyObject *__pyx_kp_u_Invert_the_sense_of_an_edit_ope;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_Opcodes;
  PyObject *__pyx_n_s_RfEditops;
  PyObject *__pyx_n_s_RfOpcodes;
  PyObject *__pyx_kp_u_Subtract_an_edit_subsequence_fr;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_n_s__27;
  PyObject *__pyx_n_s_apply_edit;
  PyObject *__pyx_kp_u_apply_edit_edit_operations_are_i;
  PyObject *__pyx_kp_u_apply_edit_expected_two_Strings;
  PyObject *__pyx_kp_u_apply_edit_first_argument_must_b;
  PyObject *__pyx_kp_u_apply_edit_first_argument_must_b_2;
  PyObject *__pyx_kp_u_apply_edit_line_508;
  PyObject *__pyx_n_s_arg1;
  PyObject *__pyx_n_s_arg2;
  PyObject *__pyx_n_s_arg3;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_as_list;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_bops;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_cpp_levenshtein;
  PyObject *__pyx_n_s_cstring;
  PyObject *__pyx_n_u_delete;
  PyObject *__pyx_n_s_destination_string;
  PyObject *__pyx_n_s_edit_operations;
  PyObject *__pyx_n_s_editops;
  PyObject *__pyx_kp_u_editops_line_266;
  PyObject *__pyx_kp_u_editops_second_and_third_argumen;
  PyObject *__pyx_n_u_equal;
  PyObject *__pyx_kp_s_home_danrui_Dataprep_pre_compil;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_u_insert;
  PyObject *__pyx_n_s_inverse;
  PyObject *__pyx_kp_u_inverse_expected_a_list_of_edit;
  PyObject *__pyx_kp_u_inverse_line_212;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_len;
  PyObject *__pyx_n_s_len1;
  PyObject *__pyx_n_s_len2;
  PyObject *__pyx_n_s_len3;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_matching_blocks;
  PyObject *__pyx_kp_u_matching_blocks_edit_operations;
  PyObject *__pyx_kp_u_matching_blocks_expected_a_list;
  PyObject *__pyx_kp_u_matching_blocks_first_argument_m;
  PyObject *__pyx_kp_u_matching_blocks_line_354;
  PyObject *__pyx_kp_u_matching_blocks_second_and_third;
  PyObject *__pyx_n_s_mblocks;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nb;
  PyObject *__pyx_n_s_nmb;
  PyObject *__pyx_n_s_nr;
  PyObject *__pyx_n_s_ns;
  PyObject *__pyx_n_s_opcodes;
  PyObject *__pyx_kp_u_opcodes_line_309;
  PyObject *__pyx_kp_u_opcodes_second_and_third_argumen;
  PyObject *__pyx_n_s_ops;
  PyObject *__pyx_n_s_orem;
  PyObject *__pyx_n_s_osub;
  PyObject *__pyx_n_s_pystring;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_rapidfuzz_distance;
  PyObject *__pyx_n_s_rapidfuzz_distance_Levenshtein;
  PyObject *__pyx_n_u_replace;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_rf_editops;
  PyObject *__pyx_n_s_rf_opcodes;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_source_string;
  PyObject *__pyx_n_s_string1;
  PyObject *__pyx_n_s_string2;
  PyObject *__pyx_n_s_subsequence;
  PyObject *__pyx_n_s_subtract_edit;
  PyObject *__pyx_kp_u_subtract_edit_expected_two_lists;
  PyObject *__pyx_kp_u_subtract_edit_line_441;
  PyObject *__pyx_kp_u_subtract_edit_subsequence_is_not;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_int_0;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Apply_a_sequence_of_edit_operat);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Find_identical_blocks_in_two_st);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Find_sequence_of_edit_operation);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Find_sequence_of_edit_operation_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invert_the_sense_of_an_edit_ope);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_RfEditops);
  Py_CLEAR(clear_module_state->__pyx_n_s_RfOpcodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Subtract_an_edit_subsequence_fr);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__14);
  Py_CLEAR(clear_module_state->__pyx_n_s__27);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_edit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_apply_edit_edit_operations_are_i);
  Py_CLEAR(clear_module_state->__pyx_kp_u_apply_edit_expected_two_Strings);
  Py_CLEAR(clear_module_state->__pyx_kp_u_apply_edit_first_argument_must_b);
  Py_CLEAR(clear_module_state->__pyx_kp_u_apply_edit_first_argument_must_b_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_apply_edit_line_508);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg1);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg2);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg3);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_bops);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cpp_levenshtein);
  Py_CLEAR(clear_module_state->__pyx_n_s_cstring);
  Py_CLEAR(clear_module_state->__pyx_n_u_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_destination_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_edit_operations);
  Py_CLEAR(clear_module_state->__pyx_n_s_editops);
  Py_CLEAR(clear_module_state->__pyx_kp_u_editops_line_266);
  Py_CLEAR(clear_module_state->__pyx_kp_u_editops_second_and_third_argumen);
  Py_CLEAR(clear_module_state->__pyx_n_u_equal);
  Py_CLEAR(clear_module_state->__pyx_kp_s_home_danrui_Dataprep_pre_compil);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_u_insert);
  Py_CLEAR(clear_module_state->__pyx_n_s_inverse);
  Py_CLEAR(clear_module_state->__pyx_kp_u_inverse_expected_a_list_of_edit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_inverse_line_212);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_len1);
  Py_CLEAR(clear_module_state->__pyx_n_s_len2);
  Py_CLEAR(clear_module_state->__pyx_n_s_len3);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_matching_blocks);
  Py_CLEAR(clear_module_state->__pyx_kp_u_matching_blocks_edit_operations);
  Py_CLEAR(clear_module_state->__pyx_kp_u_matching_blocks_expected_a_list);
  Py_CLEAR(clear_module_state->__pyx_kp_u_matching_blocks_first_argument_m);
  Py_CLEAR(clear_module_state->__pyx_kp_u_matching_blocks_line_354);
  Py_CLEAR(clear_module_state->__pyx_kp_u_matching_blocks_second_and_third);
  Py_CLEAR(clear_module_state->__pyx_n_s_mblocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nb);
  Py_CLEAR(clear_module_state->__pyx_n_s_nmb);
  Py_CLEAR(clear_module_state->__pyx_n_s_nr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ns);
  Py_CLEAR(clear_module_state->__pyx_n_s_opcodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_opcodes_line_309);
  Py_CLEAR(clear_module_state->__pyx_kp_u_opcodes_second_and_third_argumen);
  Py_CLEAR(clear_module_state->__pyx_n_s_ops);
  Py_CLEAR(clear_module_state->__pyx_n_s_orem);
  Py_CLEAR(clear_module_state->__pyx_n_s_osub);
  Py_CLEAR(clear_module_state->__pyx_n_s_pystring);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_rapidfuzz_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_rapidfuzz_distance_Levenshtein);
  Py_CLEAR(clear_module_state->__pyx_n_u_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_rf_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_rf_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_source_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_string1);
  Py_CLEAR(clear_module_state->__pyx_n_s_string2);
  Py_CLEAR(clear_module_state->__pyx_n_s_subsequence);
  Py_CLEAR(clear_module_state->__pyx_n_s_subtract_edit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_subtract_edit_expected_two_lists);
  Py_CLEAR(clear_module_state->__pyx_kp_u_subtract_edit_line_441);
  Py_CLEAR(clear_module_state->__pyx_kp_u_subtract_edit_subsequence_is_not);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Apply_a_sequence_of_edit_operat);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Find_identical_blocks_in_two_st);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Find_sequence_of_edit_operation);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Find_sequence_of_edit_operation_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invert_the_sense_of_an_edit_ope);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_RfEditops);
  Py_VISIT(traverse_module_state->__pyx_n_s_RfOpcodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Subtract_an_edit_subsequence_fr);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__14);
  Py_VISIT(traverse_module_state->__pyx_n_s__27);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_edit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_apply_edit_edit_operations_are_i);
  Py_VISIT(traverse_module_state->__pyx_kp_u_apply_edit_expected_two_Strings);
  Py_VISIT(traverse_module_state->__pyx_kp_u_apply_edit_first_argument_must_b);
  Py_VISIT(traverse_module_state->__pyx_kp_u_apply_edit_first_argument_must_b_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_apply_edit_line_508);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg1);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg2);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg3);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_bops);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cpp_levenshtein);
  Py_VISIT(traverse_module_state->__pyx_n_s_cstring);
  Py_VISIT(traverse_module_state->__pyx_n_u_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_destination_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_edit_operations);
  Py_VISIT(traverse_module_state->__pyx_n_s_editops);
  Py_VISIT(traverse_module_state->__pyx_kp_u_editops_line_266);
  Py_VISIT(traverse_module_state->__pyx_kp_u_editops_second_and_third_argumen);
  Py_VISIT(traverse_module_state->__pyx_n_u_equal);
  Py_VISIT(traverse_module_state->__pyx_kp_s_home_danrui_Dataprep_pre_compil);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_u_insert);
  Py_VISIT(traverse_module_state->__pyx_n_s_inverse);
  Py_VISIT(traverse_module_state->__pyx_kp_u_inverse_expected_a_list_of_edit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_inverse_line_212);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_len1);
  Py_VISIT(traverse_module_state->__pyx_n_s_len2);
  Py_VISIT(traverse_module_state->__pyx_n_s_len3);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_matching_blocks);
  Py_VISIT(traverse_module_state->__pyx_kp_u_matching_blocks_edit_operations);
  Py_VISIT(traverse_module_state->__pyx_kp_u_matching_blocks_expected_a_list);
  Py_VISIT(traverse_module_state->__pyx_kp_u_matching_blocks_first_argument_m);
  Py_VISIT(traverse_module_state->__pyx_kp_u_matching_blocks_line_354);
  Py_VISIT(traverse_module_state->__pyx_kp_u_matching_blocks_second_and_third);
  Py_VISIT(traverse_module_state->__pyx_n_s_mblocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nb);
  Py_VISIT(traverse_module_state->__pyx_n_s_nmb);
  Py_VISIT(traverse_module_state->__pyx_n_s_nr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ns);
  Py_VISIT(traverse_module_state->__pyx_n_s_opcodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_opcodes_line_309);
  Py_VISIT(traverse_module_state->__pyx_kp_u_opcodes_second_and_third_argumen);
  Py_VISIT(traverse_module_state->__pyx_n_s_ops);
  Py_VISIT(traverse_module_state->__pyx_n_s_orem);
  Py_VISIT(traverse_module_state->__pyx_n_s_osub);
  Py_VISIT(traverse_module_state->__pyx_n_s_pystring);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_rapidfuzz_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_rapidfuzz_distance_Levenshtein);
  Py_VISIT(traverse_module_state->__pyx_n_u_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_rf_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_rf_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_source_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_string1);
  Py_VISIT(traverse_module_state->__pyx_n_s_string2);
  Py_VISIT(traverse_module_state->__pyx_n_s_subsequence);
  Py_VISIT(traverse_module_state->__pyx_n_s_subtract_edit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_subtract_edit_expected_two_lists);
  Py_VISIT(traverse_module_state->__pyx_kp_u_subtract_edit_line_441);
  Py_VISIT(traverse_module_state->__pyx_kp_u_subtract_edit_subsequence_is_not);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_USE_MODULE_STATE
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_kp_u_Apply_a_sequence_of_edit_operat __pyx_mstate_global->__pyx_kp_u_Apply_a_sequence_of_edit_operat
#define __pyx_n_s_Editops __pyx_mstate_global->__pyx_n_s_Editops
#define __pyx_kp_u_Find_identical_blocks_in_two_st __pyx_mstate_global->__pyx_kp_u_Find_identical_blocks_in_two_st
#define __pyx_kp_u_Find_sequence_of_edit_operation __pyx_mstate_global->__pyx_kp_u_Find_sequence_of_edit_operation
#define __pyx_kp_u_Find_sequence_of_edit_operation_2 __pyx_mstate_global->__pyx_kp_u_Find_sequence_of_edit_operation_2
#define __pyx_kp_u_Invert_the_sense_of_an_edit_ope __pyx_mstate_global->__pyx_kp_u_Invert_the_sense_of_an_edit_ope
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_Opcodes __pyx_mstate_global->__pyx_n_s_Opcodes
#define __pyx_n_s_RfEditops __pyx_mstate_global->__pyx_n_s_RfEditops
#define __pyx_n_s_RfOpcodes __pyx_mstate_global->__pyx_n_s_RfOpcodes
#define __pyx_kp_u_Subtract_an_edit_subsequence_fr __pyx_mstate_global->__pyx_kp_u_Subtract_an_edit_subsequence_fr
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__14 __pyx_mstate_global->__pyx_kp_u__14
#define __pyx_n_s__27 __pyx_mstate_global->__pyx_n_s__27
#define __pyx_n_s_apply_edit __pyx_mstate_global->__pyx_n_s_apply_edit
#define __pyx_kp_u_apply_edit_edit_operations_are_i __pyx_mstate_global->__pyx_kp_u_apply_edit_edit_operations_are_i
#define __pyx_kp_u_apply_edit_expected_two_Strings __pyx_mstate_global->__pyx_kp_u_apply_edit_expected_two_Strings
#define __pyx_kp_u_apply_edit_first_argument_must_b __pyx_mstate_global->__pyx_kp_u_apply_edit_first_argument_must_b
#define __pyx_kp_u_apply_edit_first_argument_must_b_2 __pyx_mstate_global->__pyx_kp_u_apply_edit_first_argument_must_b_2
#define __pyx_kp_u_apply_edit_line_508 __pyx_mstate_global->__pyx_kp_u_apply_edit_line_508
#define __pyx_n_s_arg1 __pyx_mstate_global->__pyx_n_s_arg1
#define __pyx_n_s_arg2 __pyx_mstate_global->__pyx_n_s_arg2
#define __pyx_n_s_arg3 __pyx_mstate_global->__pyx_n_s_arg3
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_as_list __pyx_mstate_global->__pyx_n_s_as_list
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_bops __pyx_mstate_global->__pyx_n_s_bops
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_cpp_levenshtein __pyx_mstate_global->__pyx_n_s_cpp_levenshtein
#define __pyx_n_s_cstring __pyx_mstate_global->__pyx_n_s_cstring
#define __pyx_n_u_delete __pyx_mstate_global->__pyx_n_u_delete
#define __pyx_n_s_destination_string __pyx_mstate_global->__pyx_n_s_destination_string
#define __pyx_n_s_edit_operations __pyx_mstate_global->__pyx_n_s_edit_operations
#define __pyx_n_s_editops __pyx_mstate_global->__pyx_n_s_editops
#define __pyx_kp_u_editops_line_266 __pyx_mstate_global->__pyx_kp_u_editops_line_266
#define __pyx_kp_u_editops_second_and_third_argumen __pyx_mstate_global->__pyx_kp_u_editops_second_and_third_argumen
#define __pyx_n_u_equal __pyx_mstate_global->__pyx_n_u_equal
#define __pyx_kp_s_home_danrui_Dataprep_pre_compil __pyx_mstate_global->__pyx_kp_s_home_danrui_Dataprep_pre_compil
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_u_insert __pyx_mstate_global->__pyx_n_u_insert
#define __pyx_n_s_inverse __pyx_mstate_global->__pyx_n_s_inverse
#define __pyx_kp_u_inverse_expected_a_list_of_edit __pyx_mstate_global->__pyx_kp_u_inverse_expected_a_list_of_edit
#define __pyx_kp_u_inverse_line_212 __pyx_mstate_global->__pyx_kp_u_inverse_line_212
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_len __pyx_mstate_global->__pyx_n_s_len
#define __pyx_n_s_len1 __pyx_mstate_global->__pyx_n_s_len1
#define __pyx_n_s_len2 __pyx_mstate_global->__pyx_n_s_len2
#define __pyx_n_s_len3 __pyx_mstate_global->__pyx_n_s_len3
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_matching_blocks __pyx_mstate_global->__pyx_n_s_matching_blocks
#define __pyx_kp_u_matching_blocks_edit_operations __pyx_mstate_global->__pyx_kp_u_matching_blocks_edit_operations
#define __pyx_kp_u_matching_blocks_expected_a_list __pyx_mstate_global->__pyx_kp_u_matching_blocks_expected_a_list
#define __pyx_kp_u_matching_blocks_first_argument_m __pyx_mstate_global->__pyx_kp_u_matching_blocks_first_argument_m
#define __pyx_kp_u_matching_blocks_line_354 __pyx_mstate_global->__pyx_kp_u_matching_blocks_line_354
#define __pyx_kp_u_matching_blocks_second_and_third __pyx_mstate_global->__pyx_kp_u_matching_blocks_second_and_third
#define __pyx_n_s_mblocks __pyx_mstate_global->__pyx_n_s_mblocks
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nb __pyx_mstate_global->__pyx_n_s_nb
#define __pyx_n_s_nmb __pyx_mstate_global->__pyx_n_s_nmb
#define __pyx_n_s_nr __pyx_mstate_global->__pyx_n_s_nr
#define __pyx_n_s_ns __pyx_mstate_global->__pyx_n_s_ns
#define __pyx_n_s_opcodes __pyx_mstate_global->__pyx_n_s_opcodes
#define __pyx_kp_u_opcodes_line_309 __pyx_mstate_global->__pyx_kp_u_opcodes_line_309
#define __pyx_kp_u_opcodes_second_and_third_argumen __pyx_mstate_global->__pyx_kp_u_opcodes_second_and_third_argumen
#define __pyx_n_s_ops __pyx_mstate_global->__pyx_n_s_ops
#define __pyx_n_s_orem __pyx_mstate_global->__pyx_n_s_orem
#define __pyx_n_s_osub __pyx_mstate_global->__pyx_n_s_osub
#define __pyx_n_s_pystring __pyx_mstate_global->__pyx_n_s_pystring
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_rapidfuzz_distance __pyx_mstate_global->__pyx_n_s_rapidfuzz_distance
#define __pyx_n_s_rapidfuzz_distance_Levenshtein __pyx_mstate_global->__pyx_n_s_rapidfuzz_distance_Levenshtein
#define __pyx_n_u_replace __pyx_mstate_global->__pyx_n_u_replace
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_rf_editops __pyx_mstate_global->__pyx_n_s_rf_editops
#define __pyx_n_s_rf_opcodes __pyx_mstate_global->__pyx_n_s_rf_opcodes
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_source_string __pyx_mstate_global->__pyx_n_s_source_string
#define __pyx_n_s_string1 __pyx_mstate_global->__pyx_n_s_string1
#define __pyx_n_s_string2 __pyx_mstate_global->__pyx_n_s_string2
#define __pyx_n_s_subsequence __pyx_mstate_global->__pyx_n_s_subsequence
#define __pyx_n_s_subtract_edit __pyx_mstate_global->__pyx_n_s_subtract_edit
#define __pyx_kp_u_subtract_edit_expected_two_lists __pyx_mstate_global->__pyx_kp_u_subtract_edit_expected_two_lists
#define __pyx_kp_u_subtract_edit_line_441 __pyx_mstate_global->__pyx_kp_u_subtract_edit_line_441
#define __pyx_kp_u_subtract_edit_subsequence_is_not __pyx_mstate_global->__pyx_kp_u_subtract_edit_subsequence_is_not
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#endif
/* #### Code section: module_code ### */

/* "cpp_levenshtein.pyx":84
 * cdef size_t N_OPCODE_NAMES = 4
 * 
 * cdef size_t get_length_of_anything(o):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     if isinstance(o, int):
 */

static size_t __pyx_f_15cpp_levenshtein_get_length_of_anything(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_length_of_anything", 0);

  /* "cpp_levenshtein.pyx":86
 * cdef size_t get_length_of_anything(o):
 *     cdef Py_ssize_t length
 *     if isinstance(o, int):             # <<<<<<<<<<<<<<
 *         length = <Py_ssize_t>o
 *         if length < 0:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_o); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":87
 *     cdef Py_ssize_t length
 *     if isinstance(o, int):
 *         length = <Py_ssize_t>o             # <<<<<<<<<<<<<<
 *         if length < 0:
 *             return <size_t>-1
 */
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_o); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
    __pyx_v_length = ((Py_ssize_t)__pyx_t_3);

    /* "cpp_levenshtein.pyx":88
 *     if isinstance(o, int):
 *         length = <Py_ssize_t>o
 *         if length < 0:             # <<<<<<<<<<<<<<
 *             return <size_t>-1
 *         return <size_t>length
 */
    __pyx_t_2 = ((__pyx_v_length < 0) != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":89
 *         length = <Py_ssize_t>o
 *         if length < 0:
 *             return <size_t>-1             # <<<<<<<<<<<<<<
 *         return <size_t>length
 * 
 */
      __pyx_r = ((size_t)-1L);
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":88
 *     if isinstance(o, int):
 *         length = <Py_ssize_t>o
 *         if length < 0:             # <<<<<<<<<<<<<<
 *             return <size_t>-1
 *         return <size_t>length
 */
    }

    /* "cpp_levenshtein.pyx":90
 *         if length < 0:
 *             return <size_t>-1
 *         return <size_t>length             # <<<<<<<<<<<<<<
 * 
 *     if PySequence_Check(o):
 */
    __pyx_r = ((size_t)__pyx_v_length);
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":86
 * cdef size_t get_length_of_anything(o):
 *     cdef Py_ssize_t length
 *     if isinstance(o, int):             # <<<<<<<<<<<<<<
 *         length = <Py_ssize_t>o
 *         if length < 0:
 */
  }

  /* "cpp_levenshtein.pyx":92
 *         return <size_t>length
 * 
 *     if PySequence_Check(o):             # <<<<<<<<<<<<<<
 *         return <size_t>PySequence_Length(o)
 * 
 */
  __pyx_t_2 = (PySequence_Check(__pyx_v_o) != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":93
 * 
 *     if PySequence_Check(o):
 *         return <size_t>PySequence_Length(o)             # <<<<<<<<<<<<<<
 * 
 *     return <size_t>-1
 */
    __pyx_t_3 = PySequence_Length(__pyx_v_o); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 93, __pyx_L1_error)
    __pyx_r = ((size_t)__pyx_t_3);
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":92
 *         return <size_t>length
 * 
 *     if PySequence_Check(o):             # <<<<<<<<<<<<<<
 *         return <size_t>PySequence_Length(o)
 * 
 */
  }

  /* "cpp_levenshtein.pyx":95
 *         return <size_t>PySequence_Length(o)
 * 
 *     return <size_t>-1             # <<<<<<<<<<<<<<
 * 
 * cdef LevEditType string_to_edittype(string):
 */
  __pyx_r = ((size_t)-1L);
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":84
 * cdef size_t N_OPCODE_NAMES = 4
 * 
 * cdef size_t get_length_of_anything(o):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     if isinstance(o, int):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cpp_levenshtein.get_length_of_anything", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":97
 *     return <size_t>-1
 * 
 * cdef LevEditType string_to_edittype(string):             # <<<<<<<<<<<<<<
 *     for i in range(N_OPCODE_NAMES):
 *         if <PyObject*>string == opcode_names[i].pystring:
 */

static LevEditType __pyx_f_15cpp_levenshtein_string_to_edittype(PyObject *__pyx_v_string) {
  size_t __pyx_v_i;
  LevEditType __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("string_to_edittype", 0);

  /* "cpp_levenshtein.pyx":98
 * 
 * cdef LevEditType string_to_edittype(string):
 *     for i in range(N_OPCODE_NAMES):             # <<<<<<<<<<<<<<
 *         if <PyObject*>string == opcode_names[i].pystring:
 *            return <LevEditType>i
 */
  __pyx_t_1 = __pyx_v_15cpp_levenshtein_N_OPCODE_NAMES;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cpp_levenshtein.pyx":99
 * cdef LevEditType string_to_edittype(string):
 *     for i in range(N_OPCODE_NAMES):
 *         if <PyObject*>string == opcode_names[i].pystring:             # <<<<<<<<<<<<<<
 *            return <LevEditType>i
 * 
 */
    __pyx_t_4 = ((((PyObject *)__pyx_v_string) == (__pyx_v_15cpp_levenshtein_opcode_names[__pyx_v_i]).pystring) != 0);
    if (__pyx_t_4) {

      /* "cpp_levenshtein.pyx":100
 *     for i in range(N_OPCODE_NAMES):
 *         if <PyObject*>string == opcode_names[i].pystring:
 *            return <LevEditType>i             # <<<<<<<<<<<<<<
 * 
 *     if not isinstance(string, str):
 */
      __pyx_r = ((LevEditType)__pyx_v_i);
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":99
 * cdef LevEditType string_to_edittype(string):
 *     for i in range(N_OPCODE_NAMES):
 *         if <PyObject*>string == opcode_names[i].pystring:             # <<<<<<<<<<<<<<
 *            return <LevEditType>i
 * 
 */
    }
  }

  /* "cpp_levenshtein.pyx":102
 *            return <LevEditType>i
 * 
 *     if not isinstance(string, str):             # <<<<<<<<<<<<<<
 *         return LEV_EDIT_LAST
 * 
 */
  __pyx_t_4 = PyUnicode_Check(__pyx_v_string); 
  __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_5) {

    /* "cpp_levenshtein.pyx":103
 * 
 *     if not isinstance(string, str):
 *         return LEV_EDIT_LAST             # <<<<<<<<<<<<<<
 * 
 *     for i in range(N_OPCODE_NAMES):
 */
    __pyx_r = LEV_EDIT_LAST;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":102
 *            return <LevEditType>i
 * 
 *     if not isinstance(string, str):             # <<<<<<<<<<<<<<
 *         return LEV_EDIT_LAST
 * 
 */
  }

  /* "cpp_levenshtein.pyx":105
 *         return LEV_EDIT_LAST
 * 
 *     for i in range(N_OPCODE_NAMES):             # <<<<<<<<<<<<<<
 *         if not PyUnicode_CompareWithASCIIString(string, <char*>opcode_names[i].cstring):
 *             return <LevEditType>i
 */
  __pyx_t_1 = __pyx_v_15cpp_levenshtein_N_OPCODE_NAMES;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cpp_levenshtein.pyx":106
 * 
 *     for i in range(N_OPCODE_NAMES):
 *         if not PyUnicode_CompareWithASCIIString(string, <char*>opcode_names[i].cstring):             # <<<<<<<<<<<<<<
 *             return <LevEditType>i
 * 
 */
    __pyx_t_5 = ((!(PyUnicode_CompareWithASCIIString(__pyx_v_string, ((char *)(__pyx_v_15cpp_levenshtein_opcode_names[__pyx_v_i]).cstring)) != 0)) != 0);
    if (__pyx_t_5) {

      /* "cpp_levenshtein.pyx":107
 *     for i in range(N_OPCODE_NAMES):
 *         if not PyUnicode_CompareWithASCIIString(string, <char*>opcode_names[i].cstring):
 *             return <LevEditType>i             # <<<<<<<<<<<<<<
 * 
 *     return LEV_EDIT_LAST
 */
      __pyx_r = ((LevEditType)__pyx_v_i);
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":106
 * 
 *     for i in range(N_OPCODE_NAMES):
 *         if not PyUnicode_CompareWithASCIIString(string, <char*>opcode_names[i].cstring):             # <<<<<<<<<<<<<<
 *             return <LevEditType>i
 * 
 */
    }
  }

  /* "cpp_levenshtein.pyx":109
 *             return <LevEditType>i
 * 
 *     return LEV_EDIT_LAST             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = LEV_EDIT_LAST;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":97
 *     return <size_t>-1
 * 
 * cdef LevEditType string_to_edittype(string):             # <<<<<<<<<<<<<<
 *     for i in range(N_OPCODE_NAMES):
 *         if <PyObject*>string == opcode_names[i].pystring:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":112
 * 
 * 
 * cdef LevEditOp* extract_editops(list editops) except *:             # <<<<<<<<<<<<<<
 *     cdef size_t n = <size_t>len(editops)
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))
 */

static LevEditOp *__pyx_f_15cpp_levenshtein_extract_editops(PyObject *__pyx_v_editops) {
  size_t __pyx_v_n;
  LevEditOp *__pyx_v_ops;
  size_t __pyx_v_i;
  PyObject *__pyx_v_editop = NULL;
  PyObject *__pyx_v__type = NULL;
  PyObject *__pyx_v_spos = NULL;
  PyObject *__pyx_v_dpos = NULL;
  LevEditOp *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_editops", 0);

  /* "cpp_levenshtein.pyx":113
 * 
 * cdef LevEditOp* extract_editops(list editops) except *:
 *     cdef size_t n = <size_t>len(editops)             # <<<<<<<<<<<<<<
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))
 * 
 */
  if (unlikely(__pyx_v_editops == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 113, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_editops); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_v_n = ((size_t)__pyx_t_1);

  /* "cpp_levenshtein.pyx":114
 * cdef LevEditOp* extract_editops(list editops) except *:
 *     cdef size_t n = <size_t>len(editops)
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))             # <<<<<<<<<<<<<<
 * 
 *     if not ops:
 */
  __pyx_v_ops = ((LevEditOp *)safe_malloc(__pyx_v_n, (sizeof(LevEditOp))));

  /* "cpp_levenshtein.pyx":116
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))
 * 
 *     if not ops:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_ops != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":117
 * 
 *     if not ops:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 117, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":116
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))
 * 
 *     if not ops:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_levenshtein.pyx":119
 *         raise MemoryError
 * 
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         editop = editops[i]
 * 
 */
  __pyx_t_3 = __pyx_v_n;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cpp_levenshtein.pyx":120
 * 
 *     for i in range(n):
 *         editop = editops[i]             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(editop, tuple) or len(<tuple>editop) != 3:
 */
    if (unlikely(__pyx_v_editops == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 120, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_editops, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_editop, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cpp_levenshtein.pyx":122
 *         editop = editops[i]
 * 
 *         if not isinstance(editop, tuple) or len(<tuple>editop) != 3:             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    __pyx_t_7 = PyTuple_Check(__pyx_v_editop); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_editop == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 122, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_editop)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 122, __pyx_L1_error)
    __pyx_t_8 = ((__pyx_t_1 != 3) != 0);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":123
 * 
 *         if not isinstance(editop, tuple) or len(<tuple>editop) != 3:
 *             free(ops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":124
 *         if not isinstance(editop, tuple) or len(<tuple>editop) != 3:
 *             free(ops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *         _type, spos, dpos = <tuple>editop
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":122
 *         editop = editops[i]
 * 
 *         if not isinstance(editop, tuple) or len(<tuple>editop) != 3:             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    }

    /* "cpp_levenshtein.pyx":126
 *             return NULL
 * 
 *         _type, spos, dpos = <tuple>editop             # <<<<<<<<<<<<<<
 *         if not isinstance(spos, int) or not isinstance(dpos, int):
 *             free(ops)
 */
    __pyx_t_6 = __pyx_v_editop;
    __Pyx_INCREF(__pyx_t_6);
    if (likely(__pyx_t_6 != Py_None)) {
      PyObject* sequence = __pyx_t_6;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 126, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __Pyx_XDECREF_SET(__pyx_v__type, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_spos, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dpos, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "cpp_levenshtein.pyx":127
 * 
 *         _type, spos, dpos = <tuple>editop
 *         if not isinstance(spos, int) or not isinstance(dpos, int):             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    __pyx_t_8 = PyInt_Check(__pyx_v_spos); 
    __pyx_t_7 = ((!(__pyx_t_8 != 0)) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_7 = PyInt_Check(__pyx_v_dpos); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":128
 *         _type, spos, dpos = <tuple>editop
 *         if not isinstance(spos, int) or not isinstance(dpos, int):
 *             free(ops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":129
 *         if not isinstance(spos, int) or not isinstance(dpos, int):
 *             free(ops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *         ops[i].spos = <size_t>spos
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":127
 * 
 *         _type, spos, dpos = <tuple>editop
 *         if not isinstance(spos, int) or not isinstance(dpos, int):             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    }

    /* "cpp_levenshtein.pyx":131
 *             return NULL
 * 
 *         ops[i].spos = <size_t>spos             # <<<<<<<<<<<<<<
 *         ops[i].dpos = <size_t>dpos
 *         ops[i].type = string_to_edittype(_type)
 */
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_spos); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L1_error)
    (__pyx_v_ops[__pyx_v_i]).spos = ((size_t)__pyx_t_12);

    /* "cpp_levenshtein.pyx":132
 * 
 *         ops[i].spos = <size_t>spos
 *         ops[i].dpos = <size_t>dpos             # <<<<<<<<<<<<<<
 *         ops[i].type = string_to_edittype(_type)
 *         if ops[i].type == LEV_EDIT_LAST:
 */
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_dpos); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
    (__pyx_v_ops[__pyx_v_i]).dpos = ((size_t)__pyx_t_12);

    /* "cpp_levenshtein.pyx":133
 *         ops[i].spos = <size_t>spos
 *         ops[i].dpos = <size_t>dpos
 *         ops[i].type = string_to_edittype(_type)             # <<<<<<<<<<<<<<
 *         if ops[i].type == LEV_EDIT_LAST:
 *             free(ops)
 */
    (__pyx_v_ops[__pyx_v_i]).type = __pyx_f_15cpp_levenshtein_string_to_edittype(__pyx_v__type);

    /* "cpp_levenshtein.pyx":134
 *         ops[i].dpos = <size_t>dpos
 *         ops[i].type = string_to_edittype(_type)
 *         if ops[i].type == LEV_EDIT_LAST:             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    __pyx_t_2 = (((__pyx_v_ops[__pyx_v_i]).type == LEV_EDIT_LAST) != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":135
 *         ops[i].type = string_to_edittype(_type)
 *         if ops[i].type == LEV_EDIT_LAST:
 *             free(ops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":136
 *         if ops[i].type == LEV_EDIT_LAST:
 *             free(ops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *     return ops
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":134
 *         ops[i].dpos = <size_t>dpos
 *         ops[i].type = string_to_edittype(_type)
 *         if ops[i].type == LEV_EDIT_LAST:             # <<<<<<<<<<<<<<
 *             free(ops)
 *             return NULL
 */
    }
  }

  /* "cpp_levenshtein.pyx":138
 *             return NULL
 * 
 *     return ops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ops;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":112
 * 
 * 
 * cdef LevEditOp* extract_editops(list editops) except *:             # <<<<<<<<<<<<<<
 *     cdef size_t n = <size_t>len(editops)
 *     cdef LevEditOp* ops = <LevEditOp*>safe_malloc(n, sizeof(LevEditOp))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cpp_levenshtein.extract_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_editop);
  __Pyx_XDECREF(__pyx_v__type);
  __Pyx_XDECREF(__pyx_v_spos);
  __Pyx_XDECREF(__pyx_v_dpos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":141
 * 
 * 
 * cdef LevOpCode* extract_opcodes(list opcodes) except *:             # <<<<<<<<<<<<<<
 *     cdef size_t nb = <size_t>len(opcodes)
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))
 */

static LevOpCode *__pyx_f_15cpp_levenshtein_extract_opcodes(PyObject *__pyx_v_opcodes) {
  size_t __pyx_v_nb;
  LevOpCode *__pyx_v_bops;
  size_t __pyx_v_i;
  PyObject *__pyx_v_opcode = NULL;
  PyObject *__pyx_v__type = NULL;
  PyObject *__pyx_v_sbeg = NULL;
  PyObject *__pyx_v_send = NULL;
  PyObject *__pyx_v_dbeg = NULL;
  PyObject *__pyx_v_dend = NULL;
  LevOpCode *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  size_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_opcodes", 0);

  /* "cpp_levenshtein.pyx":142
 * 
 * cdef LevOpCode* extract_opcodes(list opcodes) except *:
 *     cdef size_t nb = <size_t>len(opcodes)             # <<<<<<<<<<<<<<
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))
 * 
 */
  if (unlikely(__pyx_v_opcodes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 142, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_opcodes); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_v_nb = ((size_t)__pyx_t_1);

  /* "cpp_levenshtein.pyx":143
 * cdef LevOpCode* extract_opcodes(list opcodes) except *:
 *     cdef size_t nb = <size_t>len(opcodes)
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))             # <<<<<<<<<<<<<<
 * 
 *     if not bops:
 */
  __pyx_v_bops = ((LevOpCode *)safe_malloc(__pyx_v_nb, (sizeof(LevOpCode))));

  /* "cpp_levenshtein.pyx":145
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))
 * 
 *     if not bops:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_bops != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":146
 * 
 *     if not bops:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     for i in range(nb):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 146, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":145
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))
 * 
 *     if not bops:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_levenshtein.pyx":148
 *         raise MemoryError
 * 
 *     for i in range(nb):             # <<<<<<<<<<<<<<
 *         opcode = opcodes[i]
 * 
 */
  __pyx_t_3 = __pyx_v_nb;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cpp_levenshtein.pyx":149
 * 
 *     for i in range(nb):
 *         opcode = opcodes[i]             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(opcode, tuple) or len(<tuple>opcode) !=5:
 */
    if (unlikely(__pyx_v_opcodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 149, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_opcodes, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_opcode, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cpp_levenshtein.pyx":151
 *         opcode = opcodes[i]
 * 
 *         if not isinstance(opcode, tuple) or len(<tuple>opcode) !=5:             # <<<<<<<<<<<<<<
 *             free(bops)
 *             return NULL
 */
    __pyx_t_7 = PyTuple_Check(__pyx_v_opcode); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_opcode == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_opcode)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 151, __pyx_L1_error)
    __pyx_t_8 = ((__pyx_t_1 != 5) != 0);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":152
 * 
 *         if not isinstance(opcode, tuple) or len(<tuple>opcode) !=5:
 *             free(bops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":153
 *         if not isinstance(opcode, tuple) or len(<tuple>opcode) !=5:
 *             free(bops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":151
 *         opcode = opcodes[i]
 * 
 *         if not isinstance(opcode, tuple) or len(<tuple>opcode) !=5:             # <<<<<<<<<<<<<<
 *             free(bops)
 *             return NULL
 */
    }

    /* "cpp_levenshtein.pyx":155
 *             return NULL
 * 
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode             # <<<<<<<<<<<<<<
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 */
    __pyx_t_6 = __pyx_v_opcode;
    __Pyx_INCREF(__pyx_t_6);
    if (likely(__pyx_t_6 != Py_None)) {
      PyObject* sequence = __pyx_t_6;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 155, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_13 = PyTuple_GET_ITEM(sequence, 4); 
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 155, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 155, __pyx_L1_error)
    }
    __Pyx_XDECREF_SET(__pyx_v__type, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sbeg, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_send, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dbeg, __pyx_t_12);
    __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dend, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "cpp_levenshtein.pyx":156
 * 
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or             # <<<<<<<<<<<<<<
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 *             free(bops)
 */
    __pyx_t_8 = PyInt_Check(__pyx_v_sbeg); 
    __pyx_t_7 = ((!(__pyx_t_8 != 0)) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_7 = PyInt_Check(__pyx_v_send); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }

    /* "cpp_levenshtein.pyx":157
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):             # <<<<<<<<<<<<<<
 *             free(bops)
 *             return NULL
 */
    __pyx_t_8 = PyInt_Check(__pyx_v_dbeg); 
    __pyx_t_7 = ((!(__pyx_t_8 != 0)) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_7 = PyInt_Check(__pyx_v_dend); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L10_bool_binop_done:;

    /* "cpp_levenshtein.pyx":156
 * 
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or             # <<<<<<<<<<<<<<
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 *             free(bops)
 */
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":158
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 *             free(bops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":159
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 *             free(bops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *         bops[i].sbeg = <size_t>sbeg
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":156
 * 
 *         _type, sbeg, send, dbeg, dend = <tuple>opcode
 *         if (not isinstance(sbeg, int) or not isinstance(send, int) or             # <<<<<<<<<<<<<<
 *                not isinstance(dbeg, int) or not isinstance(dend, int)):
 *             free(bops)
 */
    }

    /* "cpp_levenshtein.pyx":161
 *             return NULL
 * 
 *         bops[i].sbeg = <size_t>sbeg             # <<<<<<<<<<<<<<
 *         bops[i].send = <size_t>send
 *         bops[i].dbeg = <size_t>dbeg
 */
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_sbeg); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L1_error)
    (__pyx_v_bops[__pyx_v_i]).sbeg = ((size_t)__pyx_t_14);

    /* "cpp_levenshtein.pyx":162
 * 
 *         bops[i].sbeg = <size_t>sbeg
 *         bops[i].send = <size_t>send             # <<<<<<<<<<<<<<
 *         bops[i].dbeg = <size_t>dbeg
 *         bops[i].dend = <size_t>dend
 */
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_send); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
    (__pyx_v_bops[__pyx_v_i]).send = ((size_t)__pyx_t_14);

    /* "cpp_levenshtein.pyx":163
 *         bops[i].sbeg = <size_t>sbeg
 *         bops[i].send = <size_t>send
 *         bops[i].dbeg = <size_t>dbeg             # <<<<<<<<<<<<<<
 *         bops[i].dend = <size_t>dend
 *         bops[i].type = string_to_edittype(_type)
 */
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_dbeg); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)
    (__pyx_v_bops[__pyx_v_i]).dbeg = ((size_t)__pyx_t_14);

    /* "cpp_levenshtein.pyx":164
 *         bops[i].send = <size_t>send
 *         bops[i].dbeg = <size_t>dbeg
 *         bops[i].dend = <size_t>dend             # <<<<<<<<<<<<<<
 *         bops[i].type = string_to_edittype(_type)
 *         if bops[i].type == LEV_EDIT_LAST:
 */
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_dend); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
    (__pyx_v_bops[__pyx_v_i]).dend = ((size_t)__pyx_t_14);

    /* "cpp_levenshtein.pyx":165
 *         bops[i].dbeg = <size_t>dbeg
 *         bops[i].dend = <size_t>dend
 *         bops[i].type = string_to_edittype(_type)             # <<<<<<<<<<<<<<
 *         if bops[i].type == LEV_EDIT_LAST:
 *             free(bops)
 */
    (__pyx_v_bops[__pyx_v_i]).type = __pyx_f_15cpp_levenshtein_string_to_edittype(__pyx_v__type);

    /* "cpp_levenshtein.pyx":166
 *         bops[i].dend = <size_t>dend
 *         bops[i].type = string_to_edittype(_type)
 *         if bops[i].type == LEV_EDIT_LAST:             # <<<<<<<<<<<<<<
 *             free(bops)
 *             return NULL
 */
    __pyx_t_2 = (((__pyx_v_bops[__pyx_v_i]).type == LEV_EDIT_LAST) != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":167
 *         bops[i].type = string_to_edittype(_type)
 *         if bops[i].type == LEV_EDIT_LAST:
 *             free(bops)             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":168
 *         if bops[i].type == LEV_EDIT_LAST:
 *             free(bops)
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *     return bops
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":166
 *         bops[i].dend = <size_t>dend
 *         bops[i].type = string_to_edittype(_type)
 *         if bops[i].type == LEV_EDIT_LAST:             # <<<<<<<<<<<<<<
 *             free(bops)
 *             return NULL
 */
    }
  }

  /* "cpp_levenshtein.pyx":170
 *             return NULL
 * 
 *     return bops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_bops;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":141
 * 
 * 
 * cdef LevOpCode* extract_opcodes(list opcodes) except *:             # <<<<<<<<<<<<<<
 *     cdef size_t nb = <size_t>len(opcodes)
 *     cdef LevOpCode* bops = <LevOpCode*>safe_malloc(nb, sizeof(LevOpCode))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("cpp_levenshtein.extract_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_opcode);
  __Pyx_XDECREF(__pyx_v__type);
  __Pyx_XDECREF(__pyx_v_sbeg);
  __Pyx_XDECREF(__pyx_v_send);
  __Pyx_XDECREF(__pyx_v_dbeg);
  __Pyx_XDECREF(__pyx_v_dend);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":173
 * 
 * 
 * cdef editops_to_tuple_list(size_t n, LevEditOp *ops):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>n)
 * 
 */

static PyObject *__pyx_f_15cpp_levenshtein_editops_to_tuple_list(size_t __pyx_v_n, LevEditOp *__pyx_v_ops) {
  PyObject *__pyx_v_tuple_list = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_v_result_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("editops_to_tuple_list", 0);

  /* "cpp_levenshtein.pyx":174
 * 
 * cdef editops_to_tuple_list(size_t n, LevEditOp *ops):
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>n)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n):
 */
  __pyx_t_1 = PyList_New(((Py_ssize_t)__pyx_v_n)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tuple_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cpp_levenshtein.pyx":176
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>n)
 * 
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         result_item = (
 *             <object>opcode_names[<size_t>ops[i].type].pystring,
 */
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cpp_levenshtein.pyx":179
 *         result_item = (
 *             <object>opcode_names[<size_t>ops[i].type].pystring,
 *             ops[i].spos, ops[i].dpos)             # <<<<<<<<<<<<<<
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_ops[__pyx_v_i]).spos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_ops[__pyx_v_i]).dpos); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "cpp_levenshtein.pyx":178
 *     for i in range(n):
 *         result_item = (
 *             <object>opcode_names[<size_t>ops[i].type].pystring,             # <<<<<<<<<<<<<<
 *             ops[i].spos, ops[i].dpos)
 *         Py_INCREF(result_item)
 */
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_ops[__pyx_v_i]).type)]).pystring));
    __Pyx_GIVEREF(((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_ops[__pyx_v_i]).type)]).pystring));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_ops[__pyx_v_i]).type)]).pystring));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result_item, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "cpp_levenshtein.pyx":180
 *             <object>opcode_names[<size_t>ops[i].type].pystring,
 *             ops[i].spos, ops[i].dpos)
 *         Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 */
    Py_INCREF(__pyx_v_result_item);

    /* "cpp_levenshtein.pyx":181
 *             ops[i].spos, ops[i].dpos)
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)             # <<<<<<<<<<<<<<
 * 
 *     return tuple_list
 */
    PyList_SET_ITEM(__pyx_v_tuple_list, ((Py_ssize_t)__pyx_v_i), __pyx_v_result_item);
  }

  /* "cpp_levenshtein.pyx":183
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 *     return tuple_list             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tuple_list);
  __pyx_r = __pyx_v_tuple_list;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":173
 * 
 * 
 * cdef editops_to_tuple_list(size_t n, LevEditOp *ops):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>n)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cpp_levenshtein.editops_to_tuple_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tuple_list);
  __Pyx_XDECREF(__pyx_v_result_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":186
 * 
 * 
 * cdef opcodes_to_tuple_list(size_t nb, LevOpCode *bops):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nb)
 * 
 */

static PyObject *__pyx_f_15cpp_levenshtein_opcodes_to_tuple_list(size_t __pyx_v_nb, LevOpCode *__pyx_v_bops) {
  PyObject *__pyx_v_tuple_list = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_v_result_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opcodes_to_tuple_list", 0);

  /* "cpp_levenshtein.pyx":187
 * 
 * cdef opcodes_to_tuple_list(size_t nb, LevOpCode *bops):
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nb)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(nb):
 */
  __pyx_t_1 = PyList_New(((Py_ssize_t)__pyx_v_nb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tuple_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cpp_levenshtein.pyx":189
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nb)
 * 
 *     for i in range(nb):             # <<<<<<<<<<<<<<
 *         result_item = (
 *             <object>opcode_names[<size_t>bops[i].type].pystring,
 */
  __pyx_t_2 = __pyx_v_nb;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cpp_levenshtein.pyx":192
 *         result_item = (
 *             <object>opcode_names[<size_t>bops[i].type].pystring,
 *             bops[i].sbeg, bops[i].send,             # <<<<<<<<<<<<<<
 *             bops[i].dbeg, bops[i].dend)
 *         Py_INCREF(result_item)
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_bops[__pyx_v_i]).sbeg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_bops[__pyx_v_i]).send); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "cpp_levenshtein.pyx":193
 *             <object>opcode_names[<size_t>bops[i].type].pystring,
 *             bops[i].sbeg, bops[i].send,
 *             bops[i].dbeg, bops[i].dend)             # <<<<<<<<<<<<<<
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 */
    __pyx_t_6 = __Pyx_PyInt_FromSize_t((__pyx_v_bops[__pyx_v_i]).dbeg); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_FromSize_t((__pyx_v_bops[__pyx_v_i]).dend); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "cpp_levenshtein.pyx":191
 *     for i in range(nb):
 *         result_item = (
 *             <object>opcode_names[<size_t>bops[i].type].pystring,             # <<<<<<<<<<<<<<
 *             bops[i].sbeg, bops[i].send,
 *             bops[i].dbeg, bops[i].dend)
 */
    __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_bops[__pyx_v_i]).type)]).pystring));
    __Pyx_GIVEREF(((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_bops[__pyx_v_i]).type)]).pystring));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)(__pyx_v_15cpp_levenshtein_opcode_names[((size_t)(__pyx_v_bops[__pyx_v_i]).type)]).pystring));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result_item, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "cpp_levenshtein.pyx":194
 *             bops[i].sbeg, bops[i].send,
 *             bops[i].dbeg, bops[i].dend)
 *         Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 */
    Py_INCREF(__pyx_v_result_item);

    /* "cpp_levenshtein.pyx":195
 *             bops[i].dbeg, bops[i].dend)
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)             # <<<<<<<<<<<<<<
 * 
 *     return tuple_list
 */
    PyList_SET_ITEM(__pyx_v_tuple_list, ((Py_ssize_t)__pyx_v_i), __pyx_v_result_item);
  }

  /* "cpp_levenshtein.pyx":197
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 *     return tuple_list             # <<<<<<<<<<<<<<
 * 
 * cdef matching_blocks_to_tuple_list(size_t len1, size_t len2, size_t nmb, LevMatchingBlock *mblocks):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tuple_list);
  __pyx_r = __pyx_v_tuple_list;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":186
 * 
 * 
 * cdef opcodes_to_tuple_list(size_t nb, LevOpCode *bops):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nb)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cpp_levenshtein.opcodes_to_tuple_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tuple_list);
  __Pyx_XDECREF(__pyx_v_result_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":199
 *     return tuple_list
 * 
 * cdef matching_blocks_to_tuple_list(size_t len1, size_t len2, size_t nmb, LevMatchingBlock *mblocks):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nmb + 1)
 * 
 */

static PyObject *__pyx_f_15cpp_levenshtein_matching_blocks_to_tuple_list(size_t __pyx_v_len1, size_t __pyx_v_len2, size_t __pyx_v_nmb, LevMatchingBlock *__pyx_v_mblocks) {
  PyObject *__pyx_v_tuple_list = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_v_result_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matching_blocks_to_tuple_list", 0);

  /* "cpp_levenshtein.pyx":200
 * 
 * cdef matching_blocks_to_tuple_list(size_t len1, size_t len2, size_t nmb, LevMatchingBlock *mblocks):
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nmb + 1)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(nmb):
 */
  __pyx_t_1 = PyList_New((((Py_ssize_t)__pyx_v_nmb) + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tuple_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cpp_levenshtein.pyx":202
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nmb + 1)
 * 
 *     for i in range(nmb):             # <<<<<<<<<<<<<<
 *         result_item = (mblocks[i].spos, mblocks[i].dpos, mblocks[i].len)
 *         Py_INCREF(result_item)
 */
  __pyx_t_2 = __pyx_v_nmb;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cpp_levenshtein.pyx":203
 * 
 *     for i in range(nmb):
 *         result_item = (mblocks[i].spos, mblocks[i].dpos, mblocks[i].len)             # <<<<<<<<<<<<<<
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_mblocks[__pyx_v_i]).spos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_mblocks[__pyx_v_i]).dpos); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_FromSize_t((__pyx_v_mblocks[__pyx_v_i]).len); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result_item, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cpp_levenshtein.pyx":204
 *     for i in range(nmb):
 *         result_item = (mblocks[i].spos, mblocks[i].dpos, mblocks[i].len)
 *         Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 */
    Py_INCREF(__pyx_v_result_item);

    /* "cpp_levenshtein.pyx":205
 *         result_item = (mblocks[i].spos, mblocks[i].dpos, mblocks[i].len)
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)             # <<<<<<<<<<<<<<
 * 
 *     result_item = (len1, len2, 0)
 */
    PyList_SET_ITEM(__pyx_v_tuple_list, ((Py_ssize_t)__pyx_v_i), __pyx_v_result_item);
  }

  /* "cpp_levenshtein.pyx":207
 *         PyList_SET_ITEM(tuple_list, <Py_ssize_t>i, result_item)
 * 
 *     result_item = (len1, len2, 0)             # <<<<<<<<<<<<<<
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(tuple_list, <Py_ssize_t>nmb, result_item)
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_len1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_len2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __Pyx_XDECREF_SET(__pyx_v_result_item, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "cpp_levenshtein.pyx":208
 * 
 *     result_item = (len1, len2, 0)
 *     Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *     PyList_SET_ITEM(tuple_list, <Py_ssize_t>nmb, result_item)
 *     return tuple_list
 */
  Py_INCREF(__pyx_v_result_item);

  /* "cpp_levenshtein.pyx":209
 *     result_item = (len1, len2, 0)
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(tuple_list, <Py_ssize_t>nmb, result_item)             # <<<<<<<<<<<<<<
 *     return tuple_list
 * 
 */
  PyList_SET_ITEM(__pyx_v_tuple_list, ((Py_ssize_t)__pyx_v_nmb), __pyx_v_result_item);

  /* "cpp_levenshtein.pyx":210
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(tuple_list, <Py_ssize_t>nmb, result_item)
 *     return tuple_list             # <<<<<<<<<<<<<<
 * 
 * def inverse(edit_operations):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tuple_list);
  __pyx_r = __pyx_v_tuple_list;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":199
 *     return tuple_list
 * 
 * cdef matching_blocks_to_tuple_list(size_t len1, size_t len2, size_t nmb, LevMatchingBlock *mblocks):             # <<<<<<<<<<<<<<
 *     cdef list tuple_list = PyList_New(<Py_ssize_t>nmb + 1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cpp_levenshtein.matching_blocks_to_tuple_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tuple_list);
  __Pyx_XDECREF(__pyx_v_result_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":212
 *     return tuple_list
 * 
 * def inverse(edit_operations):             # <<<<<<<<<<<<<<
 *     """
 *     Invert the sense of an edit operation sequence.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_1inverse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_inverse, "\n    Invert the sense of an edit operation sequence.\n\n    In other words, it returns a list of edit operations transforming the\n    second (destination) string to the first (source).  It can be used\n    with both editops and opcodes.\n\n    Parameters\n    ----------\n    edit_operations : list[]\n        edit operations to invert\n\n    Returns\n    -------\n    edit_operations : list[]\n        inverted edit operations\n\n    Examples\n    --------\n    >>> inverse(editops('spam', 'park'))\n    [('insert', 0, 0), ('delete', 2, 3), ('replace', 3, 3)]\n    >>> editops('park', 'spam')\n    [('insert', 0, 0), ('delete', 2, 3), ('replace', 3, 3)]\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_1inverse = {"inverse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15cpp_levenshtein_1inverse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_inverse};
static PyObject *__pyx_pw_15cpp_levenshtein_1inverse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_edit_operations = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverse (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edit_operations)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inverse") < 0)) __PYX_ERR(0, 212, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_edit_operations = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inverse", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cpp_levenshtein.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15cpp_levenshtein_inverse(__pyx_self, __pyx_v_edit_operations);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_inverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations) {
  size_t __pyx_v_n;
  LevEditOp *__pyx_v_ops;
  LevOpCode *__pyx_v_bops;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  LevEditOp *__pyx_t_5;
  LevOpCode *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inverse", 0);

  /* "cpp_levenshtein.pyx":241
 *     cdef LevOpCode* bops
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("inverse expected a list of edit operations")
 * 
 */
  __pyx_t_1 = PyList_Check(__pyx_v_edit_operations); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":242
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("inverse expected a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 242, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":241
 *     cdef LevOpCode* bops
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("inverse expected a list of edit operations")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":244
 *         raise TypeError("inverse expected a list of edit operations")
 * 
 *     n = <size_t>len(<list>edit_operations)             # <<<<<<<<<<<<<<
 *     if not n:
 *         return edit_operations
 */
  if (unlikely(__pyx_v_edit_operations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 244, __pyx_L1_error)
  }
  __pyx_t_4 = PyList_GET_SIZE(((PyObject*)__pyx_v_edit_operations)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_v_n = ((size_t)__pyx_t_4);

  /* "cpp_levenshtein.pyx":245
 * 
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:             # <<<<<<<<<<<<<<
 *         return edit_operations
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_n != 0)) != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":246
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:
 *         return edit_operations             # <<<<<<<<<<<<<<
 * 
 *     ops = extract_editops(edit_operations)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_edit_operations);
    __pyx_r = __pyx_v_edit_operations;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":245
 * 
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:             # <<<<<<<<<<<<<<
 *         return edit_operations
 * 
 */
  }

  /* "cpp_levenshtein.pyx":248
 *         return edit_operations
 * 
 *     ops = extract_editops(edit_operations)             # <<<<<<<<<<<<<<
 *     if ops:
 *         lev_editops_invert(n, ops)
 */
  if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_v_ops = __pyx_t_5;

  /* "cpp_levenshtein.pyx":249
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         lev_editops_invert(n, ops)
 *         result = editops_to_tuple_list(n, ops)
 */
  __pyx_t_2 = (__pyx_v_ops != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":250
 *     ops = extract_editops(edit_operations)
 *     if ops:
 *         lev_editops_invert(n, ops)             # <<<<<<<<<<<<<<
 *         result = editops_to_tuple_list(n, ops)
 *         free(ops)
 */
    lev_editops_invert(__pyx_v_n, __pyx_v_ops);

    /* "cpp_levenshtein.pyx":251
 *     if ops:
 *         lev_editops_invert(n, ops)
 *         result = editops_to_tuple_list(n, ops)             # <<<<<<<<<<<<<<
 *         free(ops)
 *         return result
 */
    __pyx_t_3 = __pyx_f_15cpp_levenshtein_editops_to_tuple_list(__pyx_v_n, __pyx_v_ops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpp_levenshtein.pyx":252
 *         lev_editops_invert(n, ops)
 *         result = editops_to_tuple_list(n, ops)
 *         free(ops)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    free(__pyx_v_ops);

    /* "cpp_levenshtein.pyx":253
 *         result = editops_to_tuple_list(n, ops)
 *         free(ops)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     bops = extract_opcodes(edit_operations)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":249
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         lev_editops_invert(n, ops)
 *         result = editops_to_tuple_list(n, ops)
 */
  }

  /* "cpp_levenshtein.pyx":255
 *         return result
 * 
 *     bops = extract_opcodes(edit_operations)             # <<<<<<<<<<<<<<
 *     if bops:
 *        lev_opcodes_invert(n, bops)
 */
  if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_opcodes(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_v_bops = __pyx_t_6;

  /* "cpp_levenshtein.pyx":256
 * 
 *     bops = extract_opcodes(edit_operations)
 *     if bops:             # <<<<<<<<<<<<<<
 *        lev_opcodes_invert(n, bops)
 *        result = opcodes_to_tuple_list(n, bops)
 */
  __pyx_t_2 = (__pyx_v_bops != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":257
 *     bops = extract_opcodes(edit_operations)
 *     if bops:
 *        lev_opcodes_invert(n, bops)             # <<<<<<<<<<<<<<
 *        result = opcodes_to_tuple_list(n, bops)
 *        free(bops)
 */
    lev_opcodes_invert(__pyx_v_n, __pyx_v_bops);

    /* "cpp_levenshtein.pyx":258
 *     if bops:
 *        lev_opcodes_invert(n, bops)
 *        result = opcodes_to_tuple_list(n, bops)             # <<<<<<<<<<<<<<
 *        free(bops)
 *        return result
 */
    __pyx_t_3 = __pyx_f_15cpp_levenshtein_opcodes_to_tuple_list(__pyx_v_n, __pyx_v_bops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpp_levenshtein.pyx":259
 *        lev_opcodes_invert(n, bops)
 *        result = opcodes_to_tuple_list(n, bops)
 *        free(bops)             # <<<<<<<<<<<<<<
 *        return result
 * 
 */
    free(__pyx_v_bops);

    /* "cpp_levenshtein.pyx":260
 *        result = opcodes_to_tuple_list(n, bops)
 *        free(bops)
 *        return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":256
 * 
 *     bops = extract_opcodes(edit_operations)
 *     if bops:             # <<<<<<<<<<<<<<
 *        lev_opcodes_invert(n, bops)
 *        result = opcodes_to_tuple_list(n, bops)
 */
  }

  /* "cpp_levenshtein.pyx":263
 * 
 * 
 *     raise TypeError("inverse expected a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 263, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":212
 *     return tuple_list
 * 
 * def inverse(edit_operations):             # <<<<<<<<<<<<<<
 *     """
 *     Invert the sense of an edit operation sequence.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_levenshtein.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":266
 * 
 * 
 * def editops(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_3editops(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_2editops, "\n    Find sequence of edit operations transforming one string to another.\n    \n    editops(source_string, destination_string)\n    editops(edit_operations, source_length, destination_length)\n    \n    The result is a list of triples (operation, spos, dpos), where\n    operation is one of 'equal', 'replace', 'insert', or 'delete';  spos\n    and dpos are position of characters in the first (source) and the\n    second (destination) strings.  These are operations on signle\n    characters.  In fact the returned list doesn't contain the 'equal',\n    but all the related functions accept both lists with and without\n    'equal's.\n    \n    Examples\n    --------\n    >>> editops('spam', 'park')\n    [('delete', 0, 0), ('insert', 3, 2), ('replace', 3, 3)]\n    \n    The alternate form editops(opcodes, source_string, destination_string)\n    can be used for conversion from opcodes (5-tuples) to editops (you can\n    pass strings or their lengths, it doesn't matter).\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_3editops = {"editops", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15cpp_levenshtein_3editops, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_2editops};
static PyObject *__pyx_pw_15cpp_levenshtein_3editops(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("editops (wrapper)", 0);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "editops", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_15cpp_levenshtein_2editops(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_2editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  size_t __pyx_v_len1;
  size_t __pyx_v_len2;
  PyObject *__pyx_v_arg1 = NULL;
  PyObject *__pyx_v_arg2 = NULL;
  PyObject *__pyx_v_arg3 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("editops", 0);

  /* "cpp_levenshtein.pyx":295
 * 
 *     # convert: we were called (bops, s1, s2)
 *     if len(args) == 3:             # <<<<<<<<<<<<<<
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 3) != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":296
 *     # convert: we were called (bops, s1, s2)
 *     if len(args) == 3:
 *         arg1, arg2, arg3 = args             # <<<<<<<<<<<<<<
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 296, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_arg1 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_arg2 = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_arg3 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cpp_levenshtein.pyx":297
 *     if len(args) == 3:
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)             # <<<<<<<<<<<<<<
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 */
    __pyx_v_len1 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_arg2);

    /* "cpp_levenshtein.pyx":298
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)             # <<<<<<<<<<<<<<
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("editops second and third argument must specify sizes")
 */
    __pyx_v_len2 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_arg3);

    /* "cpp_levenshtein.pyx":299
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *             raise ValueError("editops second and third argument must specify sizes")
 * 
 */
    __pyx_t_6 = ((__pyx_v_len1 == ((size_t)-1L)) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_len2 == ((size_t)-1L)) != 0);
    __pyx_t_2 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":300
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("editops second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 *         return RfEditops(arg1, len1, len2).as_list()
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 300, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 300, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":299
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *             raise ValueError("editops second and third argument must specify sizes")
 * 
 */
    }

    /* "cpp_levenshtein.pyx":302
 *             raise ValueError("editops second and third argument must specify sizes")
 * 
 *         return RfEditops(arg1, len1, len2).as_list()             # <<<<<<<<<<<<<<
 * 
 *     # find editops: we were called (s1, s2)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_RfEditops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_len1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_len2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_9, __pyx_v_arg1, __pyx_t_7, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 3+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_as_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":295
 * 
 *     # convert: we were called (bops, s1, s2)
 *     if len(args) == 3:             # <<<<<<<<<<<<<<
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 */
  }

  /* "cpp_levenshtein.pyx":305
 * 
 *     # find editops: we were called (s1, s2)
 *     arg1, arg2 = args             # <<<<<<<<<<<<<<
 *     return rf_editops(arg1, arg2).as_list()
 * 
 */
  if (1) {
    PyObject* sequence = __pyx_v_args;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 305, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  }
  __pyx_v_arg1 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_arg2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cpp_levenshtein.pyx":306
 *     # find editops: we were called (s1, s2)
 *     arg1, arg2 = args
 *     return rf_editops(arg1, arg2).as_list()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_rf_editops); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_arg1, __pyx_v_arg2};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_as_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":266
 * 
 * 
 * def editops(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cpp_levenshtein.editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arg1);
  __Pyx_XDECREF(__pyx_v_arg2);
  __Pyx_XDECREF(__pyx_v_arg3);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":309
 * 
 * 
 * def opcodes(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_5opcodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_4opcodes, "\n    Find sequence of edit operations transforming one string to another.\n    \n    opcodes(source_string, destination_string)\n    opcodes(edit_operations, source_length, destination_length)\n    \n    The result is a list of 5-tuples with the same meaning as in\n    SequenceMatcher's get_opcodes() output.  But since the algorithms\n    differ, the actual sequences from Levenshtein and SequenceMatcher\n    may differ too.\n    \n    Examples\n    --------\n    >>> for x in opcodes('spam', 'park'):\n    ...     print(x)\n    ...\n    ('delete', 0, 1, 0, 0)\n    ('equal', 1, 3, 0, 2)\n    ('insert', 3, 3, 2, 3)\n    ('replace', 3, 4, 3, 4)\n    \n    The alternate form opcodes(editops, source_string, destination_string)\n    can be used for conversion from editops (triples) to opcodes (you can\n    pass strings or their lengths, it doesn't matter).\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_5opcodes = {"opcodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15cpp_levenshtein_5opcodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_4opcodes};
static PyObject *__pyx_pw_15cpp_levenshtein_5opcodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("opcodes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "opcodes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_15cpp_levenshtein_4opcodes(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_4opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  size_t __pyx_v_len1;
  size_t __pyx_v_len2;
  PyObject *__pyx_v_arg1 = NULL;
  PyObject *__pyx_v_arg2 = NULL;
  PyObject *__pyx_v_arg3 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opcodes", 0);

  /* "cpp_levenshtein.pyx":340
 * 
 *     # convert: we were called (ops, s1, s2)
 *     if len(args) == 3:             # <<<<<<<<<<<<<<
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 3) != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":341
 *     # convert: we were called (ops, s1, s2)
 *     if len(args) == 3:
 *         arg1, arg2, arg3 = args             # <<<<<<<<<<<<<<
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 341, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_arg1 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_arg2 = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_arg3 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cpp_levenshtein.pyx":342
 *     if len(args) == 3:
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)             # <<<<<<<<<<<<<<
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 */
    __pyx_v_len1 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_arg2);

    /* "cpp_levenshtein.pyx":343
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)             # <<<<<<<<<<<<<<
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("opcodes second and third argument must specify sizes")
 */
    __pyx_v_len2 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_arg3);

    /* "cpp_levenshtein.pyx":344
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *             raise ValueError("opcodes second and third argument must specify sizes")
 * 
 */
    __pyx_t_6 = ((__pyx_v_len1 == ((size_t)-1L)) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_len2 == ((size_t)-1L)) != 0);
    __pyx_t_2 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":345
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("opcodes second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 *         return RfOpcodes(arg1, len1, len2).as_list()
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 345, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":344
 *         len1 = get_length_of_anything(arg2)
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *             raise ValueError("opcodes second and third argument must specify sizes")
 * 
 */
    }

    /* "cpp_levenshtein.pyx":347
 *             raise ValueError("opcodes second and third argument must specify sizes")
 * 
 *         return RfOpcodes(arg1, len1, len2).as_list()             # <<<<<<<<<<<<<<
 * 
 *     # find editops: we were called (s1, s2)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_RfOpcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_len1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_len2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_9, __pyx_v_arg1, __pyx_t_7, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 3+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_as_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":340
 * 
 *     # convert: we were called (ops, s1, s2)
 *     if len(args) == 3:             # <<<<<<<<<<<<<<
 *         arg1, arg2, arg3 = args
 *         len1 = get_length_of_anything(arg2)
 */
  }

  /* "cpp_levenshtein.pyx":350
 * 
 *     # find editops: we were called (s1, s2)
 *     arg1, arg2 = args             # <<<<<<<<<<<<<<
 *     return rf_opcodes(arg1, arg2).as_list()
 * 
 */
  if (1) {
    PyObject* sequence = __pyx_v_args;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 350, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  }
  __pyx_v_arg1 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_arg2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cpp_levenshtein.pyx":351
 *     # find editops: we were called (s1, s2)
 *     arg1, arg2 = args
 *     return rf_opcodes(arg1, arg2).as_list()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_rf_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_arg1, __pyx_v_arg2};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_as_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cpp_levenshtein.pyx":309
 * 
 * 
 * def opcodes(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cpp_levenshtein.opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arg1);
  __Pyx_XDECREF(__pyx_v_arg2);
  __Pyx_XDECREF(__pyx_v_arg3);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":354
 * 
 * 
 * def matching_blocks(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Find identical blocks in two strings.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_7matching_blocks(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_6matching_blocks, "\n    Find identical blocks in two strings.\n\n    Parameters\n    ----------\n    edit_operations : list[]\n        editops or opcodes created for the source and destination string\n    source_string : str | int\n        source string or the length of the source string\n    destination_string : str | int\n        destination string or the length of the destination string\n\n    Returns\n    -------\n    matching_blocks : list[]\n        List of triples with the same meaning as in SequenceMatcher's\n        get_matching_blocks() output.\n\n    Examples\n    --------\n    >>> a, b = 'spam', 'park'\n    >>> matching_blocks(editops(a, b), a, b)\n    [(1, 0, 2), (4, 4, 0)]\n    >>> matching_blocks(editops(a, b), len(a), len(b))\n    [(1, 0, 2), (4, 4, 0)]\n    \n    The last zero-length block is not an error, but it's there for\n    compatibility with difflib which always emits it.\n    \n    One can join the matching blocks to get two identical strings:\n\n    >>> a, b = 'dog kennels', 'mattresses'\n    >>> mb = matching_blocks(editops(a,b), a, b)\n    >>> ''.join([a[x[0]:x[0]+x[2]] for x in mb])\n    'ees'\n    >>> ''.join([b[x[1]:x[1]+x[2]] for x in mb])\n    'ees'\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_7matching_blocks = {"matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15cpp_levenshtein_7matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_6matching_blocks};
static PyObject *__pyx_pw_15cpp_levenshtein_7matching_blocks(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_edit_operations = 0;
  PyObject *__pyx_v_source_string = 0;
  PyObject *__pyx_v_destination_string = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matching_blocks (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edit_operations)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source_string)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("matching_blocks", 1, 3, 3, 1); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_destination_string)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("matching_blocks", 1, 3, 3, 2); __PYX_ERR(0, 354, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "matching_blocks") < 0)) __PYX_ERR(0, 354, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_edit_operations = values[0];
    __pyx_v_source_string = values[1];
    __pyx_v_destination_string = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matching_blocks", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 354, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cpp_levenshtein.matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15cpp_levenshtein_6matching_blocks(__pyx_self, __pyx_v_edit_operations, __pyx_v_source_string, __pyx_v_destination_string);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_6matching_blocks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string) {
  size_t __pyx_v_n;
  size_t __pyx_v_nmb;
  size_t __pyx_v_len1;
  size_t __pyx_v_len2;
  LevEditOp *__pyx_v_ops;
  LevOpCode *__pyx_v_bops;
  LevMatchingBlock *__pyx_v_mblocks;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  LevEditOp *__pyx_t_5;
  LevOpCode *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matching_blocks", 0);

  /* "cpp_levenshtein.pyx":398
 *     cdef LevMatchingBlock* mblocks
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("matching_blocks first argument must be a List of edit operations")
 * 
 */
  __pyx_t_1 = PyList_Check(__pyx_v_edit_operations); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":399
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("matching_blocks first argument must be a List of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 399, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":398
 *     cdef LevMatchingBlock* mblocks
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("matching_blocks first argument must be a List of edit operations")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":401
 *         raise TypeError("matching_blocks first argument must be a List of edit operations")
 * 
 *     n = <size_t>len(<list>edit_operations)             # <<<<<<<<<<<<<<
 *     len1 = get_length_of_anything(source_string)
 *     len2 = get_length_of_anything(destination_string)
 */
  if (unlikely(__pyx_v_edit_operations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 401, __pyx_L1_error)
  }
  __pyx_t_4 = PyList_GET_SIZE(((PyObject*)__pyx_v_edit_operations)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_v_n = ((size_t)__pyx_t_4);

  /* "cpp_levenshtein.pyx":402
 * 
 *     n = <size_t>len(<list>edit_operations)
 *     len1 = get_length_of_anything(source_string)             # <<<<<<<<<<<<<<
 *     len2 = get_length_of_anything(destination_string)
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:
 */
  __pyx_v_len1 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_source_string);

  /* "cpp_levenshtein.pyx":403
 *     n = <size_t>len(<list>edit_operations)
 *     len1 = get_length_of_anything(source_string)
 *     len2 = get_length_of_anything(destination_string)             # <<<<<<<<<<<<<<
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:
 *         raise ValueError("matching_blocks second and third argument must specify sizes")
 */
  __pyx_v_len2 = __pyx_f_15cpp_levenshtein_get_length_of_anything(__pyx_v_destination_string);

  /* "cpp_levenshtein.pyx":404
 *     len1 = get_length_of_anything(source_string)
 *     len2 = get_length_of_anything(destination_string)
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *         raise ValueError("matching_blocks second and third argument must specify sizes")
 * 
 */
  __pyx_t_1 = ((__pyx_v_len1 == ((size_t)-1L)) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = ((__pyx_v_len2 == ((size_t)-1L)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":405
 *     len2 = get_length_of_anything(destination_string)
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:
 *         raise ValueError("matching_blocks second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 405, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":404
 *     len1 = get_length_of_anything(source_string)
 *     len2 = get_length_of_anything(destination_string)
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:             # <<<<<<<<<<<<<<
 *         raise ValueError("matching_blocks second and third argument must specify sizes")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":408
 * 
 * 
 *     ops = extract_editops(edit_operations)             # <<<<<<<<<<<<<<
 *     if ops:
 *         if lev_editops_check_errors(len1, len2, n, ops):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_v_ops = __pyx_t_5;

  /* "cpp_levenshtein.pyx":409
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         if lev_editops_check_errors(len1, len2, n, ops):
 *             free(ops)
 */
  __pyx_t_2 = (__pyx_v_ops != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":410
 *     ops = extract_editops(edit_operations)
 *     if ops:
 *         if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *             free(ops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 */
    __pyx_t_2 = (lev_editops_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_ops) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":411
 *     if ops:
 *         if lev_editops_check_errors(len1, len2, n, ops):
 *             free(ops)             # <<<<<<<<<<<<<<
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 * 
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":412
 *         if lev_editops_check_errors(len1, len2, n, ops):
 *             free(ops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 412, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":410
 *     ops = extract_editops(edit_operations)
 *     if ops:
 *         if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *             free(ops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 */
    }

    /* "cpp_levenshtein.pyx":414
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 * 
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)             # <<<<<<<<<<<<<<
 *         free(ops)
 *         if not mblocks and n:
 */
    __pyx_v_mblocks = lev_editops_matching_blocks(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_ops, (&__pyx_v_nmb));

    /* "cpp_levenshtein.pyx":415
 * 
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)
 *         free(ops)             # <<<<<<<<<<<<<<
 *         if not mblocks and n:
 *             raise MemoryError
 */
    free(__pyx_v_ops);

    /* "cpp_levenshtein.pyx":416
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)
 *         free(ops)
 *         if not mblocks and n:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
    __pyx_t_1 = ((!(__pyx_v_mblocks != 0)) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_n != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L10_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":417
 *         free(ops)
 *         if not mblocks and n:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 */
      PyErr_NoMemory(); __PYX_ERR(0, 417, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":416
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)
 *         free(ops)
 *         if not mblocks and n:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
    }

    /* "cpp_levenshtein.pyx":419
 *             raise MemoryError
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)             # <<<<<<<<<<<<<<
 *         free(mblocks)
 *         return result
 */
    __pyx_t_3 = __pyx_f_15cpp_levenshtein_matching_blocks_to_tuple_list(__pyx_v_len1, __pyx_v_len2, __pyx_v_nmb, __pyx_v_mblocks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpp_levenshtein.pyx":420
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 *         free(mblocks)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    free(__pyx_v_mblocks);

    /* "cpp_levenshtein.pyx":421
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 *         free(mblocks)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     bops = extract_opcodes(edit_operations)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":409
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         if lev_editops_check_errors(len1, len2, n, ops):
 *             free(ops)
 */
  }

  /* "cpp_levenshtein.pyx":423
 *         return result
 * 
 *     bops = extract_opcodes(edit_operations)             # <<<<<<<<<<<<<<
 *     if bops:
 *         if lev_opcodes_check_errors(len1, len2, n, bops):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_opcodes(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_v_bops = __pyx_t_6;

  /* "cpp_levenshtein.pyx":424
 * 
 *     bops = extract_opcodes(edit_operations)
 *     if bops:             # <<<<<<<<<<<<<<
 *         if lev_opcodes_check_errors(len1, len2, n, bops):
 *             free(bops)
 */
  __pyx_t_2 = (__pyx_v_bops != 0);
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":425
 *     bops = extract_opcodes(edit_operations)
 *     if bops:
 *         if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *             free(bops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 */
    __pyx_t_2 = (lev_opcodes_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_bops) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":426
 *     if bops:
 *         if lev_opcodes_check_errors(len1, len2, n, bops):
 *             free(bops)             # <<<<<<<<<<<<<<
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 * 
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":427
 *         if lev_opcodes_check_errors(len1, len2, n, bops):
 *             free(bops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *         mblocks = lev_opcodes_matching_blocks(len1, len2, n, bops, &nmb)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 427, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":425
 *     bops = extract_opcodes(edit_operations)
 *     if bops:
 *         if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *             free(bops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 */
    }

    /* "cpp_levenshtein.pyx":429
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")
 * 
 *         mblocks = lev_opcodes_matching_blocks(len1, len2, n, bops, &nmb)             # <<<<<<<<<<<<<<
 *         free(bops)
 *         if not mblocks and n:
 */
    __pyx_v_mblocks = lev_opcodes_matching_blocks(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_bops, (&__pyx_v_nmb));

    /* "cpp_levenshtein.pyx":430
 * 
 *         mblocks = lev_opcodes_matching_blocks(len1, len2, n, bops, &nmb)
 *         free(bops)             # <<<<<<<<<<<<<<
 *         if not mblocks and n:
 *             raise MemoryError
 */
    free(__pyx_v_bops);

    /* "cpp_levenshtein.pyx":431
 *         mblocks = lev_opcodes_matching_blocks(len1, len2, n, bops, &nmb)
 *         free(bops)
 *         if not mblocks and n:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
    __pyx_t_1 = ((!(__pyx_v_mblocks != 0)) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_n != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L15_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "cpp_levenshtein.pyx":432
 *         free(bops)
 *         if not mblocks and n:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 */
      PyErr_NoMemory(); __PYX_ERR(0, 432, __pyx_L1_error)

      /* "cpp_levenshtein.pyx":431
 *         mblocks = lev_opcodes_matching_blocks(len1, len2, n, bops, &nmb)
 *         free(bops)
 *         if not mblocks and n:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
    }

    /* "cpp_levenshtein.pyx":434
 *             raise MemoryError
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)             # <<<<<<<<<<<<<<
 *         free(mblocks)
 *         return result
 */
    __pyx_t_3 = __pyx_f_15cpp_levenshtein_matching_blocks_to_tuple_list(__pyx_v_len1, __pyx_v_len2, __pyx_v_nmb, __pyx_v_mblocks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpp_levenshtein.pyx":435
 * 
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 *         free(mblocks)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    free(__pyx_v_mblocks);

    /* "cpp_levenshtein.pyx":436
 *         result = matching_blocks_to_tuple_list(len1, len2, nmb, mblocks)
 *         free(mblocks)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     raise TypeError("matching_blocks expected a list of edit operations")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":424
 * 
 *     bops = extract_opcodes(edit_operations)
 *     if bops:             # <<<<<<<<<<<<<<
 *         if lev_opcodes_check_errors(len1, len2, n, bops):
 *             free(bops)
 */
  }

  /* "cpp_levenshtein.pyx":438
 *         return result
 * 
 *     raise TypeError("matching_blocks expected a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 438, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":354
 * 
 * 
 * def matching_blocks(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Find identical blocks in two strings.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_levenshtein.matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":441
 * 
 * 
 * def subtract_edit(edit_operations, subsequence):             # <<<<<<<<<<<<<<
 *     """
 *     Subtract an edit subsequence from a sequence.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_9subtract_edit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_8subtract_edit, "\n    Subtract an edit subsequence from a sequence.\n    \n    subtract_edit(edit_operations, subsequence)\n    \n    The result is equivalent to\n    editops(apply_edit(subsequence, s1, s2), s2), except that is\n    constructed directly from the edit operations.  That is, if you apply\n    it to the result of subsequence application, you get the same final\n    string as from application complete edit_operations.  It may be not\n    identical, though (in amibuous cases, like insertion of a character\n    next to the same character).\n    \n    The subtracted subsequence must be an ordered subset of\n    edit_operations.\n    \n    Note this function does not accept difflib-style opcodes as no one in\n    his right mind wants to create subsequences from them.\n\n    Examples\n    --------\n    >>> e = editops('man', 'scotsman')\n    >>> e1 = e[:3]\n    >>> bastard = apply_edit(e1, 'man', 'scotsman')\n    >>> bastard\n    'scoman'\n    >>> apply_edit(subtract_edit(e, e1), bastard, 'scotsman')\n    'scotsman'\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_9subtract_edit = {"subtract_edit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15cpp_levenshtein_9subtract_edit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_8subtract_edit};
static PyObject *__pyx_pw_15cpp_levenshtein_9subtract_edit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_edit_operations = 0;
  PyObject *__pyx_v_subsequence = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subtract_edit (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_subsequence,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_subsequence,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edit_operations)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_subsequence)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("subtract_edit", 1, 2, 2, 1); __PYX_ERR(0, 441, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "subtract_edit") < 0)) __PYX_ERR(0, 441, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_edit_operations = values[0];
    __pyx_v_subsequence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subtract_edit", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 441, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cpp_levenshtein.subtract_edit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15cpp_levenshtein_8subtract_edit(__pyx_self, __pyx_v_edit_operations, __pyx_v_subsequence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_8subtract_edit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_subsequence) {
  size_t __pyx_v_n;
  size_t __pyx_v_ns;
  size_t __pyx_v_nr;
  LevEditOp *__pyx_v_ops;
  LevEditOp *__pyx_v_osub;
  LevEditOp *__pyx_v_orem;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  LevEditOp *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subtract_edit", 0);

  /* "cpp_levenshtein.pyx":476
 *     cdef LevEditOp* orem
 * 
 *     if not isinstance(edit_operations, list) or not isinstance(subsequence, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("subtract_edit expected two lists of edit operations")
 * 
 */
  __pyx_t_2 = PyList_Check(__pyx_v_edit_operations); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyList_Check(__pyx_v_subsequence); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cpp_levenshtein.pyx":477
 * 
 *     if not isinstance(edit_operations, list) or not isinstance(subsequence, list):
 *         raise TypeError("subtract_edit expected two lists of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     ns = <size_t>len(<list>subsequence)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 477, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":476
 *     cdef LevEditOp* orem
 * 
 *     if not isinstance(edit_operations, list) or not isinstance(subsequence, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("subtract_edit expected two lists of edit operations")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":479
 *         raise TypeError("subtract_edit expected two lists of edit operations")
 * 
 *     ns = <size_t>len(<list>subsequence)             # <<<<<<<<<<<<<<
 *     if not ns:
 *         return edit_operations
 */
  if (unlikely(__pyx_v_subsequence == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(((PyObject*)__pyx_v_subsequence)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_v_ns = ((size_t)__pyx_t_5);

  /* "cpp_levenshtein.pyx":480
 * 
 *     ns = <size_t>len(<list>subsequence)
 *     if not ns:             # <<<<<<<<<<<<<<
 *         return edit_operations
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_ns != 0)) != 0);
  if (__pyx_t_1) {

    /* "cpp_levenshtein.pyx":481
 *     ns = <size_t>len(<list>subsequence)
 *     if not ns:
 *         return edit_operations             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_edit_operations);
    __pyx_r = __pyx_v_edit_operations;
    goto __pyx_L0;

    /* "cpp_levenshtein.pyx":480
 * 
 *     ns = <size_t>len(<list>subsequence)
 *     if not ns:             # <<<<<<<<<<<<<<
 *         return edit_operations
 * 
 */
  }

  /* "cpp_levenshtein.pyx":483
 *         return edit_operations
 * 
 *     n = <size_t>len(<list>edit_operations)             # <<<<<<<<<<<<<<
 *     if not n:
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 */
  if (unlikely(__pyx_v_edit_operations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 483, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(((PyObject*)__pyx_v_edit_operations)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_v_n = ((size_t)__pyx_t_5);

  /* "cpp_levenshtein.pyx":484
 * 
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:             # <<<<<<<<<<<<<<
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_n != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cpp_levenshtein.pyx":485
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")             # <<<<<<<<<<<<<<
 * 
 *     ops = extract_editops(edit_operations)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 485, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":484
 * 
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:             # <<<<<<<<<<<<<<
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":487
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 *     ops = extract_editops(edit_operations)             # <<<<<<<<<<<<<<
 *     if ops:
 *         osub = extract_editops(subsequence)
 */
  if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_v_ops = __pyx_t_6;

  /* "cpp_levenshtein.pyx":488
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         osub = extract_editops(subsequence)
 *         if osub:
 */
  __pyx_t_1 = (__pyx_v_ops != 0);
  if (__pyx_t_1) {

    /* "cpp_levenshtein.pyx":489
 *     ops = extract_editops(edit_operations)
 *     if ops:
 *         osub = extract_editops(subsequence)             # <<<<<<<<<<<<<<
 *         if osub:
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)
 */
    if (!(likely(PyList_CheckExact(__pyx_v_subsequence))||((__pyx_v_subsequence) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_subsequence))) __PYX_ERR(0, 489, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_subsequence)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
    __pyx_v_osub = __pyx_t_6;

    /* "cpp_levenshtein.pyx":490
 *     if ops:
 *         osub = extract_editops(subsequence)
 *         if osub:             # <<<<<<<<<<<<<<
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)
 *             free(ops)
 */
    __pyx_t_1 = (__pyx_v_osub != 0);
    if (__pyx_t_1) {

      /* "cpp_levenshtein.pyx":491
 *         osub = extract_editops(subsequence)
 *         if osub:
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)             # <<<<<<<<<<<<<<
 *             free(ops)
 *             free(osub)
 */
      __pyx_v_orem = lev_editops_subtract(__pyx_v_n, __pyx_v_ops, __pyx_v_ns, __pyx_v_osub, (&__pyx_v_nr));

      /* "cpp_levenshtein.pyx":492
 *         if osub:
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)
 *             free(ops)             # <<<<<<<<<<<<<<
 *             free(osub)
 * 
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":493
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)
 *             free(ops)
 *             free(osub)             # <<<<<<<<<<<<<<
 * 
 *             if not orem and nr == <size_t>-1:
 */
      free(__pyx_v_osub);

      /* "cpp_levenshtein.pyx":495
 *             free(osub)
 * 
 *             if not orem and nr == <size_t>-1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 */
      __pyx_t_2 = ((!(__pyx_v_orem != 0)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_nr == ((size_t)-1L)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_levenshtein.pyx":496
 * 
 *             if not orem and nr == <size_t>-1:
 *                 raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")             # <<<<<<<<<<<<<<
 * 
 *             result = editops_to_tuple_list(nr, orem)
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 496, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":495
 *             free(osub)
 * 
 *             if not orem and nr == <size_t>-1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 */
      }

      /* "cpp_levenshtein.pyx":498
 *                 raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")
 * 
 *             result = editops_to_tuple_list(nr, orem)             # <<<<<<<<<<<<<<
 *             free(orem)
 *             return result
 */
      __pyx_t_4 = __pyx_f_15cpp_levenshtein_editops_to_tuple_list(__pyx_v_nr, __pyx_v_orem); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_result = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "cpp_levenshtein.pyx":499
 * 
 *             result = editops_to_tuple_list(nr, orem)
 *             free(orem)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      free(__pyx_v_orem);

      /* "cpp_levenshtein.pyx":500
 *             result = editops_to_tuple_list(nr, orem)
 *             free(orem)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         free(ops)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":490
 *     if ops:
 *         osub = extract_editops(subsequence)
 *         if osub:             # <<<<<<<<<<<<<<
 *             orem = lev_editops_subtract(n, ops, ns, osub, &nr)
 *             free(ops)
 */
    }

    /* "cpp_levenshtein.pyx":502
 *             return result
 * 
 *         free(ops)             # <<<<<<<<<<<<<<
 * 
 *     raise TypeError("subtract_edit expected two lists of edit operations")
 */
    free(__pyx_v_ops);

    /* "cpp_levenshtein.pyx":488
 * 
 *     ops = extract_editops(edit_operations)
 *     if ops:             # <<<<<<<<<<<<<<
 *         osub = extract_editops(subsequence)
 *         if osub:
 */
  }

  /* "cpp_levenshtein.pyx":504
 *         free(ops)
 * 
 *     raise TypeError("subtract_edit expected two lists of edit operations")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 504, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":441
 * 
 * 
 * def subtract_edit(edit_operations, subsequence):             # <<<<<<<<<<<<<<
 *     """
 *     Subtract an edit subsequence from a sequence.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpp_levenshtein.subtract_edit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_levenshtein.pyx":508
 * 
 * 
 * def apply_edit(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Apply a sequence of edit operations to a string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_15cpp_levenshtein_11apply_edit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15cpp_levenshtein_10apply_edit, "\n    Apply a sequence of edit operations to a string.\n    \n    apply_edit(edit_operations, source_string, destination_string)\n    \n    In the case of editops, the sequence can be arbitrary ordered subset\n    of the edit sequence transforming source_string to destination_string.\n    \n    Examples\n    --------\n    >>> e = editops('man', 'scotsman')\n    >>> apply_edit(e, 'man', 'scotsman')\n    'scotsman'\n    >>> apply_edit(e[:3], 'man', 'scotsman')\n    'scoman'\n    \n    The other form of edit operations, opcodes, is not very suitable for\n    such a tricks, because it has to always span over complete strings,\n    subsets can be created by carefully replacing blocks with 'equal'\n    blocks, or by enlarging 'equal' block at the expense of other blocks\n    and adjusting the other blocks accordingly.\n\n    >>> a, b = 'spam and eggs', 'foo and bar'\n    >>> e = opcodes(a, b)\n    >>> apply_edit(inverse(e), b, a)\n    'spam and eggs'\n    >>> e[4] = ('equal', 10, 13, 8, 11)\n    >>> e\n    [('delete', 0, 1, 0, 0), ('replace', 1, 4, 0, 3), ('equal', 4, 9, 3, 8), ('delete', 9, 10, 8, 8), ('equal', 10, 13, 8, 11)]\n    >>> apply_edit(e, a, b)\n    'foo and ggs'\n    ");
static PyMethodDef __pyx_mdef_15cpp_levenshtein_11apply_edit = {"apply_edit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15cpp_levenshtein_11apply_edit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15cpp_levenshtein_10apply_edit};
static PyObject *__pyx_pw_15cpp_levenshtein_11apply_edit(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_edit_operations = 0;
  PyObject *__pyx_v_source_string = 0;
  PyObject *__pyx_v_destination_string = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_edit (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edit_operations,&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edit_operations)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source_string)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("apply_edit", 1, 3, 3, 1); __PYX_ERR(0, 508, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_destination_string)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("apply_edit", 1, 3, 3, 2); __PYX_ERR(0, 508, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_edit") < 0)) __PYX_ERR(0, 508, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_edit_operations = values[0];
    __pyx_v_source_string = values[1];
    __pyx_v_destination_string = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_edit", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 508, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cpp_levenshtein.apply_edit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15cpp_levenshtein_10apply_edit(__pyx_self, __pyx_v_edit_operations, __pyx_v_source_string, __pyx_v_destination_string);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15cpp_levenshtein_10apply_edit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_edit_operations, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string) {
  size_t __pyx_v_n;
  size_t __pyx_v_len1;
  size_t __pyx_v_len2;
  size_t __pyx_v_len3;
  LevEditOp *__pyx_v_ops;
  LevOpCode *__pyx_v_bops;
  void *__pyx_v_string1;
  void *__pyx_v_string2;
  void *__pyx_v_s;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  LevEditOp *__pyx_t_6;
  LevOpCode *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_edit", 0);

  /* "cpp_levenshtein.pyx":545
 *     cdef LevOpCode *bops
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("apply_edit first argument must be a List of edit operations")
 * 
 */
  __pyx_t_1 = PyList_Check(__pyx_v_edit_operations); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_levenshtein.pyx":546
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("apply_edit first argument must be a List of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 546, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":545
 *     cdef LevOpCode *bops
 * 
 *     if not isinstance(edit_operations, list):             # <<<<<<<<<<<<<<
 *         raise TypeError("apply_edit first argument must be a List of edit operations")
 * 
 */
  }

  /* "cpp_levenshtein.pyx":548
 *         raise TypeError("apply_edit first argument must be a List of edit operations")
 * 
 *     n = <size_t>len(<list>edit_operations)             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):
 */
  if (unlikely(__pyx_v_edit_operations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 548, __pyx_L1_error)
  }
  __pyx_t_4 = PyList_GET_SIZE(((PyObject*)__pyx_v_edit_operations)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 548, __pyx_L1_error)
  __pyx_v_n = ((size_t)__pyx_t_4);

  /* "cpp_levenshtein.pyx":550
 *     n = <size_t>len(<list>edit_operations)
 * 
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):             # <<<<<<<<<<<<<<
 *         if not n:
 *             return source_string
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_source_string); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyBytes_Check(__pyx_v_destination_string); 
  __pyx_t_1 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":551
 * 
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):
 *         if not n:             # <<<<<<<<<<<<<<
 *             return source_string
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_n != 0)) != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":552
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):
 *         if not n:
 *             return source_string             # <<<<<<<<<<<<<<
 * 
 *         len1 = <size_t>len(<bytes>source_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_source_string);
      __pyx_r = __pyx_v_source_string;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":551
 * 
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):
 *         if not n:             # <<<<<<<<<<<<<<
 *             return source_string
 * 
 */
    }

    /* "cpp_levenshtein.pyx":554
 *             return source_string
 * 
 *         len1 = <size_t>len(<bytes>source_string)             # <<<<<<<<<<<<<<
 *         len2 = <size_t>len(<bytes>destination_string)
 * 
 */
    if (unlikely(__pyx_v_source_string == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 554, __pyx_L1_error)
    }
    __pyx_t_4 = PyBytes_GET_SIZE(((PyObject*)__pyx_v_source_string)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 554, __pyx_L1_error)
    __pyx_v_len1 = ((size_t)__pyx_t_4);

    /* "cpp_levenshtein.pyx":555
 * 
 *         len1 = <size_t>len(<bytes>source_string)
 *         len2 = <size_t>len(<bytes>destination_string)             # <<<<<<<<<<<<<<
 * 
 *         string1 = PyBytes_AS_STRING(source_string)
 */
    if (unlikely(__pyx_v_destination_string == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 555, __pyx_L1_error)
    }
    __pyx_t_4 = PyBytes_GET_SIZE(((PyObject*)__pyx_v_destination_string)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 555, __pyx_L1_error)
    __pyx_v_len2 = ((size_t)__pyx_t_4);

    /* "cpp_levenshtein.pyx":557
 *         len2 = <size_t>len(<bytes>destination_string)
 * 
 *         string1 = PyBytes_AS_STRING(source_string)             # <<<<<<<<<<<<<<
 *         string2 = PyBytes_AS_STRING(destination_string)
 * 
 */
    __pyx_v_string1 = PyBytes_AS_STRING(__pyx_v_source_string);

    /* "cpp_levenshtein.pyx":558
 * 
 *         string1 = PyBytes_AS_STRING(source_string)
 *         string2 = PyBytes_AS_STRING(destination_string)             # <<<<<<<<<<<<<<
 * 
 *         ops = extract_editops(edit_operations)
 */
    __pyx_v_string2 = PyBytes_AS_STRING(__pyx_v_destination_string);

    /* "cpp_levenshtein.pyx":560
 *         string2 = PyBytes_AS_STRING(destination_string)
 * 
 *         ops = extract_editops(edit_operations)             # <<<<<<<<<<<<<<
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):
 */
    if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 560, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L1_error)
    __pyx_v_ops = __pyx_t_6;

    /* "cpp_levenshtein.pyx":561
 * 
 *         ops = extract_editops(edit_operations)
 *         if ops:             # <<<<<<<<<<<<<<
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 */
    __pyx_t_2 = (__pyx_v_ops != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":562
 *         ops = extract_editops(edit_operations)
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      __pyx_t_2 = (lev_editops_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_ops) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":563
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)             # <<<<<<<<<<<<<<
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 */
        free(__pyx_v_ops);

        /* "cpp_levenshtein.pyx":564
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *             s = <void*>lev_editops_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 564, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":562
 *         ops = extract_editops(edit_operations)
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      }

      /* "cpp_levenshtein.pyx":566
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 *             s = <void*>lev_editops_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,             # <<<<<<<<<<<<<<
 *                             n, ops, &len3)
 *             free(ops)
 */
      __pyx_v_s = ((void *)lev_editops_apply<lev_byte>(__pyx_v_len1, ((lev_byte const *)__pyx_v_string1), __pyx_v_len2, ((lev_byte const *)__pyx_v_string2), __pyx_v_n, __pyx_v_ops, (&__pyx_v_len3)));

      /* "cpp_levenshtein.pyx":568
 *             s = <void*>lev_editops_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,
 *                             n, ops, &len3)
 *             free(ops)             # <<<<<<<<<<<<<<
 *             if not s and len3:
 *                 raise MemoryError
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":569
 *                             n, ops, &len3)
 *             free(ops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      __pyx_t_1 = ((!(__pyx_v_s != 0)) != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_len3 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L11_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":570
 *             free(ops)
 *             if not s and len3:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 */
        PyErr_NoMemory(); __PYX_ERR(0, 570, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":569
 *                             n, ops, &len3)
 *             free(ops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      }

      /* "cpp_levenshtein.pyx":572
 *                 raise MemoryError
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)             # <<<<<<<<<<<<<<
 *             free(s)
 *             return result
 */
      __pyx_t_3 = PyBytes_FromStringAndSize(((char const *)__pyx_v_s), ((Py_ssize_t)__pyx_v_len3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cpp_levenshtein.pyx":573
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 *             free(s)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      free(__pyx_v_s);

      /* "cpp_levenshtein.pyx":574
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 *             free(s)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         bops = extract_opcodes(edit_operations)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":561
 * 
 *         ops = extract_editops(edit_operations)
 *         if ops:             # <<<<<<<<<<<<<<
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 */
    }

    /* "cpp_levenshtein.pyx":576
 *             return result
 * 
 *         bops = extract_opcodes(edit_operations)             # <<<<<<<<<<<<<<
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 */
    if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 576, __pyx_L1_error)
    __pyx_t_7 = __pyx_f_15cpp_levenshtein_extract_opcodes(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
    __pyx_v_bops = __pyx_t_7;

    /* "cpp_levenshtein.pyx":577
 * 
 *         bops = extract_opcodes(edit_operations)
 *         if bops:             # <<<<<<<<<<<<<<
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 */
    __pyx_t_2 = (__pyx_v_bops != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":578
 *         bops = extract_opcodes(edit_operations)
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      __pyx_t_2 = (lev_opcodes_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_bops) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":579
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)             # <<<<<<<<<<<<<<
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 */
        free(__pyx_v_bops);

        /* "cpp_levenshtein.pyx":580
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *             s = <void*>lev_opcodes_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 580, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":578
 *         bops = extract_opcodes(edit_operations)
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      }

      /* "cpp_levenshtein.pyx":582
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 *             s = <void*>lev_opcodes_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,             # <<<<<<<<<<<<<<
 *                             n, bops, &len3)
 *             free(bops)
 */
      __pyx_v_s = ((void *)lev_opcodes_apply<lev_byte>(__pyx_v_len1, ((lev_byte const *)__pyx_v_string1), __pyx_v_len2, ((lev_byte const *)__pyx_v_string2), __pyx_v_n, __pyx_v_bops, (&__pyx_v_len3)));

      /* "cpp_levenshtein.pyx":584
 *             s = <void*>lev_opcodes_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,
 *                             n, bops, &len3)
 *             free(bops)             # <<<<<<<<<<<<<<
 *             if not s and len3:
 *                 raise MemoryError
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":585
 *                             n, bops, &len3)
 *             free(bops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      __pyx_t_1 = ((!(__pyx_v_s != 0)) != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_len3 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L16_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":586
 *             free(bops)
 *             if not s and len3:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 */
        PyErr_NoMemory(); __PYX_ERR(0, 586, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":585
 *                             n, bops, &len3)
 *             free(bops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      }

      /* "cpp_levenshtein.pyx":588
 *                 raise MemoryError
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)             # <<<<<<<<<<<<<<
 *             free(s)
 *             return result
 */
      __pyx_t_3 = PyBytes_FromStringAndSize(((char const *)__pyx_v_s), ((Py_ssize_t)__pyx_v_len3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cpp_levenshtein.pyx":589
 * 
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 *             free(s)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      free(__pyx_v_s);

      /* "cpp_levenshtein.pyx":590
 *             result = PyBytes_FromStringAndSize(<const char*>s, <Py_ssize_t>len3)
 *             free(s)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":577
 * 
 *         bops = extract_opcodes(edit_operations)
 *         if bops:             # <<<<<<<<<<<<<<
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 */
    }

    /* "cpp_levenshtein.pyx":592
 *             return result
 * 
 *         raise TypeError("apply_edit first argument must be a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 592, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":550
 *     n = <size_t>len(<list>edit_operations)
 * 
 *     if isinstance(source_string, bytes) and isinstance(destination_string, bytes):             # <<<<<<<<<<<<<<
 *         if not n:
 *             return source_string
 */
  }

  /* "cpp_levenshtein.pyx":594
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):             # <<<<<<<<<<<<<<
 *         if not n:
 *             return source_string
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_source_string); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_5 = PyUnicode_Check(__pyx_v_destination_string); 
  __pyx_t_1 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cpp_levenshtein.pyx":595
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):
 *         if not n:             # <<<<<<<<<<<<<<
 *             return source_string
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_n != 0)) != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":596
 *     if isinstance(source_string, str) and isinstance(destination_string, str):
 *         if not n:
 *             return source_string             # <<<<<<<<<<<<<<
 * 
 *         len1 = <size_t>len(<str>source_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_source_string);
      __pyx_r = __pyx_v_source_string;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":595
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):
 *         if not n:             # <<<<<<<<<<<<<<
 *             return source_string
 * 
 */
    }

    /* "cpp_levenshtein.pyx":598
 *             return source_string
 * 
 *         len1 = <size_t>len(<str>source_string)             # <<<<<<<<<<<<<<
 *         len2 = <size_t>len(<str>destination_string)
 * 
 */
    if (unlikely(__pyx_v_source_string == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 598, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_source_string)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 598, __pyx_L1_error)
    __pyx_v_len1 = ((size_t)__pyx_t_4);

    /* "cpp_levenshtein.pyx":599
 * 
 *         len1 = <size_t>len(<str>source_string)
 *         len2 = <size_t>len(<str>destination_string)             # <<<<<<<<<<<<<<
 * 
 *         string1 = PyUnicode_AS_UNICODE(source_string)
 */
    if (unlikely(__pyx_v_destination_string == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 599, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_destination_string)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 599, __pyx_L1_error)
    __pyx_v_len2 = ((size_t)__pyx_t_4);

    /* "cpp_levenshtein.pyx":601
 *         len2 = <size_t>len(<str>destination_string)
 * 
 *         string1 = PyUnicode_AS_UNICODE(source_string)             # <<<<<<<<<<<<<<
 *         string2 = PyUnicode_AS_UNICODE(destination_string)
 * 
 */
    __pyx_v_string1 = PyUnicode_AS_UNICODE(__pyx_v_source_string);

    /* "cpp_levenshtein.pyx":602
 * 
 *         string1 = PyUnicode_AS_UNICODE(source_string)
 *         string2 = PyUnicode_AS_UNICODE(destination_string)             # <<<<<<<<<<<<<<
 * 
 *         ops = extract_editops(edit_operations)
 */
    __pyx_v_string2 = PyUnicode_AS_UNICODE(__pyx_v_destination_string);

    /* "cpp_levenshtein.pyx":604
 *         string2 = PyUnicode_AS_UNICODE(destination_string)
 * 
 *         ops = extract_editops(edit_operations)             # <<<<<<<<<<<<<<
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):
 */
    if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 604, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_15cpp_levenshtein_extract_editops(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L1_error)
    __pyx_v_ops = __pyx_t_6;

    /* "cpp_levenshtein.pyx":605
 * 
 *         ops = extract_editops(edit_operations)
 *         if ops:             # <<<<<<<<<<<<<<
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 */
    __pyx_t_2 = (__pyx_v_ops != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":606
 *         ops = extract_editops(edit_operations)
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      __pyx_t_2 = (lev_editops_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_ops) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":607
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)             # <<<<<<<<<<<<<<
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 */
        free(__pyx_v_ops);

        /* "cpp_levenshtein.pyx":608
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *             s = <void*>lev_editops_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 608, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":606
 *         ops = extract_editops(edit_operations)
 *         if ops:
 *             if lev_editops_check_errors(len1, len2, n, ops):             # <<<<<<<<<<<<<<
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      }

      /* "cpp_levenshtein.pyx":610
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 *             s = <void*>lev_editops_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,             # <<<<<<<<<<<<<<
 *                             n, ops, &len3)
 *             free(ops)
 */
      __pyx_v_s = ((void *)lev_editops_apply<wchar_t>(__pyx_v_len1, ((wchar_t const *)__pyx_v_string1), __pyx_v_len2, ((wchar_t const *)__pyx_v_string2), __pyx_v_n, __pyx_v_ops, (&__pyx_v_len3)));

      /* "cpp_levenshtein.pyx":612
 *             s = <void*>lev_editops_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,
 *                             n, ops, &len3)
 *             free(ops)             # <<<<<<<<<<<<<<
 *             if not s and len3:
 *                 raise MemoryError
 */
      free(__pyx_v_ops);

      /* "cpp_levenshtein.pyx":613
 *                             n, ops, &len3)
 *             free(ops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      __pyx_t_1 = ((!(__pyx_v_s != 0)) != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_len3 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L25_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":614
 *             free(ops)
 *             if not s and len3:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 */
        PyErr_NoMemory(); __PYX_ERR(0, 614, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":613
 *                             n, ops, &len3)
 *             free(ops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      }

      /* "cpp_levenshtein.pyx":616
 *                 raise MemoryError
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)             # <<<<<<<<<<<<<<
 *             free(s)
 *             return result
 */
      __pyx_t_3 = PyUnicode_FromWideChar(((wchar_t const *)__pyx_v_s), ((Py_ssize_t)__pyx_v_len3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cpp_levenshtein.pyx":617
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 *             free(s)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      free(__pyx_v_s);

      /* "cpp_levenshtein.pyx":618
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 *             free(s)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         bops = extract_opcodes(edit_operations)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":605
 * 
 *         ops = extract_editops(edit_operations)
 *         if ops:             # <<<<<<<<<<<<<<
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 */
    }

    /* "cpp_levenshtein.pyx":620
 *             return result
 * 
 *         bops = extract_opcodes(edit_operations)             # <<<<<<<<<<<<<<
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 */
    if (!(likely(PyList_CheckExact(__pyx_v_edit_operations))||((__pyx_v_edit_operations) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_edit_operations))) __PYX_ERR(0, 620, __pyx_L1_error)
    __pyx_t_7 = __pyx_f_15cpp_levenshtein_extract_opcodes(((PyObject*)__pyx_v_edit_operations)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L1_error)
    __pyx_v_bops = __pyx_t_7;

    /* "cpp_levenshtein.pyx":621
 * 
 *         bops = extract_opcodes(edit_operations)
 *         if bops:             # <<<<<<<<<<<<<<
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 */
    __pyx_t_2 = (__pyx_v_bops != 0);
    if (__pyx_t_2) {

      /* "cpp_levenshtein.pyx":622
 *         bops = extract_opcodes(edit_operations)
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      __pyx_t_2 = (lev_opcodes_check_errors(__pyx_v_len1, __pyx_v_len2, __pyx_v_n, __pyx_v_bops) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":623
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)             # <<<<<<<<<<<<<<
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 */
        free(__pyx_v_bops);

        /* "cpp_levenshtein.pyx":624
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *             s = <void*>lev_opcodes_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 624, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":622
 *         bops = extract_opcodes(edit_operations)
 *         if bops:
 *             if lev_opcodes_check_errors(len1, len2, n, bops):             # <<<<<<<<<<<<<<
 *                 free(bops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 */
      }

      /* "cpp_levenshtein.pyx":626
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")
 * 
 *             s = <void*>lev_opcodes_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,             # <<<<<<<<<<<<<<
 *                             n, bops, &len3)
 *             free(bops)
 */
      __pyx_v_s = ((void *)lev_opcodes_apply<wchar_t>(__pyx_v_len1, ((wchar_t const *)__pyx_v_string1), __pyx_v_len2, ((wchar_t const *)__pyx_v_string2), __pyx_v_n, __pyx_v_bops, (&__pyx_v_len3)));

      /* "cpp_levenshtein.pyx":628
 *             s = <void*>lev_opcodes_apply[wchar_t](len1, <const wchar_t*>string1, len2, <const wchar_t*>string2,
 *                             n, bops, &len3)
 *             free(bops)             # <<<<<<<<<<<<<<
 *             if not s and len3:
 *                 raise MemoryError
 */
      free(__pyx_v_bops);

      /* "cpp_levenshtein.pyx":629
 *                             n, bops, &len3)
 *             free(bops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      __pyx_t_1 = ((!(__pyx_v_s != 0)) != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L30_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_len3 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L30_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "cpp_levenshtein.pyx":630
 *             free(bops)
 *             if not s and len3:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 */
        PyErr_NoMemory(); __PYX_ERR(0, 630, __pyx_L1_error)

        /* "cpp_levenshtein.pyx":629
 *                             n, bops, &len3)
 *             free(bops)
 *             if not s and len3:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
      }

      /* "cpp_levenshtein.pyx":632
 *                 raise MemoryError
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)             # <<<<<<<<<<<<<<
 *             free(s)
 *             return result
 */
      __pyx_t_3 = PyUnicode_FromWideChar(((wchar_t const *)__pyx_v_s), ((Py_ssize_t)__pyx_v_len3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cpp_levenshtein.pyx":633
 * 
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 *             free(s)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      free(__pyx_v_s);

      /* "cpp_levenshtein.pyx":634
 *             result = PyUnicode_FromWideChar(<const wchar_t*>s, <Py_ssize_t>len3)
 *             free(s)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L0;

      /* "cpp_levenshtein.pyx":621
 * 
 *         bops = extract_opcodes(edit_operations)
 *         if bops:             # <<<<<<<<<<<<<<
 *             if lev_opcodes_check_errors(len1, len2, n, bops):
 *                 free(bops)
 */
    }

    /* "cpp_levenshtein.pyx":636
 *             return result
 * 
 *         raise TypeError("apply_edit first argument must be a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     raise TypeError("apply_edit expected two Strings or two Unicodes")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 636, __pyx_L1_error)

    /* "cpp_levenshtein.pyx":594
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):             # <<<<<<<<<<<<<<
 *         if not n:
 *             return source_string
 */
  }

  /* "cpp_levenshtein.pyx":638
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 * 
 *     raise TypeError("apply_edit expected two Strings or two Unicodes")             # <<<<<<<<<<<<<<
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 638, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":508
 * 
 * 
 * def apply_edit(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Apply a sequence of edit operations to a string.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_levenshtein.apply_edit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_USE_MODULE_STATE
  {0, __pyx_k_Apply_a_sequence_of_edit_operat, sizeof(__pyx_k_Apply_a_sequence_of_edit_operat), 0, 1, 0, 0},
  {0, __pyx_k_Editops, sizeof(__pyx_k_Editops), 0, 0, 1, 1},
  {0, __pyx_k_Find_identical_blocks_in_two_st, sizeof(__pyx_k_Find_identical_blocks_in_two_st), 0, 1, 0, 0},
  {0, __pyx_k_Find_sequence_of_edit_operation, sizeof(__pyx_k_Find_sequence_of_edit_operation), 0, 1, 0, 0},
  {0, __pyx_k_Find_sequence_of_edit_operation_2, sizeof(__pyx_k_Find_sequence_of_edit_operation_2), 0, 1, 0, 0},
  {0, __pyx_k_Invert_the_sense_of_an_edit_ope, sizeof(__pyx_k_Invert_the_sense_of_an_edit_ope), 0, 1, 0, 0},
  {0, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {0, __pyx_k_Opcodes, sizeof(__pyx_k_Opcodes), 0, 0, 1, 1},
  {0, __pyx_k_RfEditops, sizeof(__pyx_k_RfEditops), 0, 0, 1, 1},
  {0, __pyx_k_RfOpcodes, sizeof(__pyx_k_RfOpcodes), 0, 0, 1, 1},
  {0, __pyx_k_Subtract_an_edit_subsequence_fr, sizeof(__pyx_k_Subtract_an_edit_subsequence_fr), 0, 1, 0, 0},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {0, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 1, 1},
  {0, __pyx_k_apply_edit, sizeof(__pyx_k_apply_edit), 0, 0, 1, 1},
  {0, __pyx_k_apply_edit_edit_operations_are_i, sizeof(__pyx_k_apply_edit_edit_operations_are_i), 0, 1, 0, 0},
  {0, __pyx_k_apply_edit_expected_two_Strings, sizeof(__pyx_k_apply_edit_expected_two_Strings), 0, 1, 0, 0},
  {0, __pyx_k_apply_edit_first_argument_must_b, sizeof(__pyx_k_apply_edit_first_argument_must_b), 0, 1, 0, 0},
  {0, __pyx_k_apply_edit_first_argument_must_b_2, sizeof(__pyx_k_apply_edit_first_argument_must_b_2), 0, 1, 0, 0},
  {0, __pyx_k_apply_edit_line_508, sizeof(__pyx_k_apply_edit_line_508), 0, 1, 0, 0},
  {0, __pyx_k_arg1, sizeof(__pyx_k_arg1), 0, 0, 1, 1},
  {0, __pyx_k_arg2, sizeof(__pyx_k_arg2), 0, 0, 1, 1},
  {0, __pyx_k_arg3, sizeof(__pyx_k_arg3), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_as_list, sizeof(__pyx_k_as_list), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_bops, sizeof(__pyx_k_bops), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_cpp_levenshtein, sizeof(__pyx_k_cpp_levenshtein), 0, 0, 1, 1},
  {0, __pyx_k_cstring, sizeof(__pyx_k_cstring), 0, 0, 1, 1},
  {0, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 1, 0, 1},
  {0, __pyx_k_destination_string, sizeof(__pyx_k_destination_string), 0, 0, 1, 1},
  {0, __pyx_k_edit_operations, sizeof(__pyx_k_edit_operations), 0, 0, 1, 1},
  {0, __pyx_k_editops, sizeof(__pyx_k_editops), 0, 0, 1, 1},
  {0, __pyx_k_editops_line_266, sizeof(__pyx_k_editops_line_266), 0, 1, 0, 0},
  {0, __pyx_k_editops_second_and_third_argumen, sizeof(__pyx_k_editops_second_and_third_argumen), 0, 1, 0, 0},
  {0, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 1, 0, 1},
  {0, __pyx_k_home_danrui_Dataprep_pre_compil, sizeof(__pyx_k_home_danrui_Dataprep_pre_compil), 0, 0, 1, 0},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 1, 0, 1},
  {0, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
  {0, __pyx_k_inverse_expected_a_list_of_edit, sizeof(__pyx_k_inverse_expected_a_list_of_edit), 0, 1, 0, 0},
  {0, __pyx_k_inverse_line_212, sizeof(__pyx_k_inverse_line_212), 0, 1, 0, 0},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {0, __pyx_k_len1, sizeof(__pyx_k_len1), 0, 0, 1, 1},
  {0, __pyx_k_len2, sizeof(__pyx_k_len2), 0, 0, 1, 1},
  {0, __pyx_k_len3, sizeof(__pyx_k_len3), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_matching_blocks, sizeof(__pyx_k_matching_blocks), 0, 0, 1, 1},
  {0, __pyx_k_matching_blocks_edit_operations, sizeof(__pyx_k_matching_blocks_edit_operations), 0, 1, 0, 0},
  {0, __pyx_k_matching_blocks_expected_a_list, sizeof(__pyx_k_matching_blocks_expected_a_list), 0, 1, 0, 0},
  {0, __pyx_k_matching_blocks_first_argument_m, sizeof(__pyx_k_matching_blocks_first_argument_m), 0, 1, 0, 0},
  {0, __pyx_k_matching_blocks_line_354, sizeof(__pyx_k_matching_blocks_line_354), 0, 1, 0, 0},
  {0, __pyx_k_matching_blocks_second_and_third, sizeof(__pyx_k_matching_blocks_second_and_third), 0, 1, 0, 0},
  {0, __pyx_k_mblocks, sizeof(__pyx_k_mblocks), 0, 0, 1, 1},
  {0, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_nb, sizeof(__pyx_k_nb), 0, 0, 1, 1},
  {0, __pyx_k_nmb, sizeof(__pyx_k_nmb), 0, 0, 1, 1},
  {0, __pyx_k_nr, sizeof(__pyx_k_nr), 0, 0, 1, 1},
  {0, __pyx_k_ns, sizeof(__pyx_k_ns), 0, 0, 1, 1},
  {0, __pyx_k_opcodes, sizeof(__pyx_k_opcodes), 0, 0, 1, 1},
  {0, __pyx_k_opcodes_line_309, sizeof(__pyx_k_opcodes_line_309), 0, 1, 0, 0},
  {0, __pyx_k_opcodes_second_and_third_argumen, sizeof(__pyx_k_opcodes_second_and_third_argumen), 0, 1, 0, 0},
  {0, __pyx_k_ops, sizeof(__pyx_k_ops), 0, 0, 1, 1},
  {0, __pyx_k_orem, sizeof(__pyx_k_orem), 0, 0, 1, 1},
  {0, __pyx_k_osub, sizeof(__pyx_k_osub), 0, 0, 1, 1},
  {0, __pyx_k_pystring, sizeof(__pyx_k_pystring), 0, 0, 1, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_rapidfuzz_distance, sizeof(__pyx_k_rapidfuzz_distance), 0, 0, 1, 1},
  {0, __pyx_k_rapidfuzz_distance_Levenshtein, sizeof(__pyx_k_rapidfuzz_distance_Levenshtein), 0, 0, 1, 1},
  {0, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 1, 0, 1},
  {0, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {0, __pyx_k_rf_editops, sizeof(__pyx_k_rf_editops), 0, 0, 1, 1},
  {0, __pyx_k_rf_opcodes, sizeof(__pyx_k_rf_opcodes), 0, 0, 1, 1},
  {0, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {0, __pyx_k_source_string, sizeof(__pyx_k_source_string), 0, 0, 1, 1},
  {0, __pyx_k_string1, sizeof(__pyx_k_string1), 0, 0, 1, 1},
  {0, __pyx_k_string2, sizeof(__pyx_k_string2), 0, 0, 1, 1},
  {0, __pyx_k_subsequence, sizeof(__pyx_k_subsequence), 0, 0, 1, 1},
  {0, __pyx_k_subtract_edit, sizeof(__pyx_k_subtract_edit), 0, 0, 1, 1},
  {0, __pyx_k_subtract_edit_expected_two_lists, sizeof(__pyx_k_subtract_edit_expected_two_lists), 0, 1, 0, 0},
  {0, __pyx_k_subtract_edit_line_441, sizeof(__pyx_k_subtract_edit_line_441), 0, 1, 0, 0},
  {0, __pyx_k_subtract_edit_subsequence_is_not, sizeof(__pyx_k_subtract_edit_subsequence_is_not), 0, 1, 0, 0},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_Apply_a_sequence_of_edit_operat, __pyx_k_Apply_a_sequence_of_edit_operat, sizeof(__pyx_k_Apply_a_sequence_of_edit_operat), 0, 1, 0, 0},
  {&__pyx_n_s_Editops, __pyx_k_Editops, sizeof(__pyx_k_Editops), 0, 0, 1, 1},
  {&__pyx_kp_u_Find_identical_blocks_in_two_st, __pyx_k_Find_identical_blocks_in_two_st, sizeof(__pyx_k_Find_identical_blocks_in_two_st), 0, 1, 0, 0},
  {&__pyx_kp_u_Find_sequence_of_edit_operation, __pyx_k_Find_sequence_of_edit_operation, sizeof(__pyx_k_Find_sequence_of_edit_operation), 0, 1, 0, 0},
  {&__pyx_kp_u_Find_sequence_of_edit_operation_2, __pyx_k_Find_sequence_of_edit_operation_2, sizeof(__pyx_k_Find_sequence_of_edit_operation_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Invert_the_sense_of_an_edit_ope, __pyx_k_Invert_the_sense_of_an_edit_ope, sizeof(__pyx_k_Invert_the_sense_of_an_edit_ope), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_Opcodes, __pyx_k_Opcodes, sizeof(__pyx_k_Opcodes), 0, 0, 1, 1},
  {&__pyx_n_s_RfEditops, __pyx_k_RfEditops, sizeof(__pyx_k_RfEditops), 0, 0, 1, 1},
  {&__pyx_n_s_RfOpcodes, __pyx_k_RfOpcodes, sizeof(__pyx_k_RfOpcodes), 0, 0, 1, 1},
  {&__pyx_kp_u_Subtract_an_edit_subsequence_fr, __pyx_k_Subtract_an_edit_subsequence_fr, sizeof(__pyx_k_Subtract_an_edit_subsequence_fr), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_n_s__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 1, 1},
  {&__pyx_n_s_apply_edit, __pyx_k_apply_edit, sizeof(__pyx_k_apply_edit), 0, 0, 1, 1},
  {&__pyx_kp_u_apply_edit_edit_operations_are_i, __pyx_k_apply_edit_edit_operations_are_i, sizeof(__pyx_k_apply_edit_edit_operations_are_i), 0, 1, 0, 0},
  {&__pyx_kp_u_apply_edit_expected_two_Strings, __pyx_k_apply_edit_expected_two_Strings, sizeof(__pyx_k_apply_edit_expected_two_Strings), 0, 1, 0, 0},
  {&__pyx_kp_u_apply_edit_first_argument_must_b, __pyx_k_apply_edit_first_argument_must_b, sizeof(__pyx_k_apply_edit_first_argument_must_b), 0, 1, 0, 0},
  {&__pyx_kp_u_apply_edit_first_argument_must_b_2, __pyx_k_apply_edit_first_argument_must_b_2, sizeof(__pyx_k_apply_edit_first_argument_must_b_2), 0, 1, 0, 0},
  {&__pyx_kp_u_apply_edit_line_508, __pyx_k_apply_edit_line_508, sizeof(__pyx_k_apply_edit_line_508), 0, 1, 0, 0},
  {&__pyx_n_s_arg1, __pyx_k_arg1, sizeof(__pyx_k_arg1), 0, 0, 1, 1},
  {&__pyx_n_s_arg2, __pyx_k_arg2, sizeof(__pyx_k_arg2), 0, 0, 1, 1},
  {&__pyx_n_s_arg3, __pyx_k_arg3, sizeof(__pyx_k_arg3), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_list, __pyx_k_as_list, sizeof(__pyx_k_as_list), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_bops, __pyx_k_bops, sizeof(__pyx_k_bops), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cpp_levenshtein, __pyx_k_cpp_levenshtein, sizeof(__pyx_k_cpp_levenshtein), 0, 0, 1, 1},
  {&__pyx_n_s_cstring, __pyx_k_cstring, sizeof(__pyx_k_cstring), 0, 0, 1, 1},
  {&__pyx_n_u_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 1, 0, 1},
  {&__pyx_n_s_destination_string, __pyx_k_destination_string, sizeof(__pyx_k_destination_string), 0, 0, 1, 1},
  {&__pyx_n_s_edit_operations, __pyx_k_edit_operations, sizeof(__pyx_k_edit_operations), 0, 0, 1, 1},
  {&__pyx_n_s_editops, __pyx_k_editops, sizeof(__pyx_k_editops), 0, 0, 1, 1},
  {&__pyx_kp_u_editops_line_266, __pyx_k_editops_line_266, sizeof(__pyx_k_editops_line_266), 0, 1, 0, 0},
  {&__pyx_kp_u_editops_second_and_third_argumen, __pyx_k_editops_second_and_third_argumen, sizeof(__pyx_k_editops_second_and_third_argumen), 0, 1, 0, 0},
  {&__pyx_n_u_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 1, 0, 1},
  {&__pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_k_home_danrui_Dataprep_pre_compil, sizeof(__pyx_k_home_danrui_Dataprep_pre_compil), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_u_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 1, 0, 1},
  {&__pyx_n_s_inverse, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
  {&__pyx_kp_u_inverse_expected_a_list_of_edit, __pyx_k_inverse_expected_a_list_of_edit, sizeof(__pyx_k_inverse_expected_a_list_of_edit), 0, 1, 0, 0},
  {&__pyx_kp_u_inverse_line_212, __pyx_k_inverse_line_212, sizeof(__pyx_k_inverse_line_212), 0, 1, 0, 0},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_len1, __pyx_k_len1, sizeof(__pyx_k_len1), 0, 0, 1, 1},
  {&__pyx_n_s_len2, __pyx_k_len2, sizeof(__pyx_k_len2), 0, 0, 1, 1},
  {&__pyx_n_s_len3, __pyx_k_len3, sizeof(__pyx_k_len3), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matching_blocks, __pyx_k_matching_blocks, sizeof(__pyx_k_matching_blocks), 0, 0, 1, 1},
  {&__pyx_kp_u_matching_blocks_edit_operations, __pyx_k_matching_blocks_edit_operations, sizeof(__pyx_k_matching_blocks_edit_operations), 0, 1, 0, 0},
  {&__pyx_kp_u_matching_blocks_expected_a_list, __pyx_k_matching_blocks_expected_a_list, sizeof(__pyx_k_matching_blocks_expected_a_list), 0, 1, 0, 0},
  {&__pyx_kp_u_matching_blocks_first_argument_m, __pyx_k_matching_blocks_first_argument_m, sizeof(__pyx_k_matching_blocks_first_argument_m), 0, 1, 0, 0},
  {&__pyx_kp_u_matching_blocks_line_354, __pyx_k_matching_blocks_line_354, sizeof(__pyx_k_matching_blocks_line_354), 0, 1, 0, 0},
  {&__pyx_kp_u_matching_blocks_second_and_third, __pyx_k_matching_blocks_second_and_third, sizeof(__pyx_k_matching_blocks_second_and_third), 0, 1, 0, 0},
  {&__pyx_n_s_mblocks, __pyx_k_mblocks, sizeof(__pyx_k_mblocks), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nb, __pyx_k_nb, sizeof(__pyx_k_nb), 0, 0, 1, 1},
  {&__pyx_n_s_nmb, __pyx_k_nmb, sizeof(__pyx_k_nmb), 0, 0, 1, 1},
  {&__pyx_n_s_nr, __pyx_k_nr, sizeof(__pyx_k_nr), 0, 0, 1, 1},
  {&__pyx_n_s_ns, __pyx_k_ns, sizeof(__pyx_k_ns), 0, 0, 1, 1},
  {&__pyx_n_s_opcodes, __pyx_k_opcodes, sizeof(__pyx_k_opcodes), 0, 0, 1, 1},
  {&__pyx_kp_u_opcodes_line_309, __pyx_k_opcodes_line_309, sizeof(__pyx_k_opcodes_line_309), 0, 1, 0, 0},
  {&__pyx_kp_u_opcodes_second_and_third_argumen, __pyx_k_opcodes_second_and_third_argumen, sizeof(__pyx_k_opcodes_second_and_third_argumen), 0, 1, 0, 0},
  {&__pyx_n_s_ops, __pyx_k_ops, sizeof(__pyx_k_ops), 0, 0, 1, 1},
  {&__pyx_n_s_orem, __pyx_k_orem, sizeof(__pyx_k_orem), 0, 0, 1, 1},
  {&__pyx_n_s_osub, __pyx_k_osub, sizeof(__pyx_k_osub), 0, 0, 1, 1},
  {&__pyx_n_s_pystring, __pyx_k_pystring, sizeof(__pyx_k_pystring), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rapidfuzz_distance, __pyx_k_rapidfuzz_distance, sizeof(__pyx_k_rapidfuzz_distance), 0, 0, 1, 1},
  {&__pyx_n_s_rapidfuzz_distance_Levenshtein, __pyx_k_rapidfuzz_distance_Levenshtein, sizeof(__pyx_k_rapidfuzz_distance_Levenshtein), 0, 0, 1, 1},
  {&__pyx_n_u_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 1, 0, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_rf_editops, __pyx_k_rf_editops, sizeof(__pyx_k_rf_editops), 0, 0, 1, 1},
  {&__pyx_n_s_rf_opcodes, __pyx_k_rf_opcodes, sizeof(__pyx_k_rf_opcodes), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_source_string, __pyx_k_source_string, sizeof(__pyx_k_source_string), 0, 0, 1, 1},
  {&__pyx_n_s_string1, __pyx_k_string1, sizeof(__pyx_k_string1), 0, 0, 1, 1},
  {&__pyx_n_s_string2, __pyx_k_string2, sizeof(__pyx_k_string2), 0, 0, 1, 1},
  {&__pyx_n_s_subsequence, __pyx_k_subsequence, sizeof(__pyx_k_subsequence), 0, 0, 1, 1},
  {&__pyx_n_s_subtract_edit, __pyx_k_subtract_edit, sizeof(__pyx_k_subtract_edit), 0, 0, 1, 1},
  {&__pyx_kp_u_subtract_edit_expected_two_lists, __pyx_k_subtract_edit_expected_two_lists, sizeof(__pyx_k_subtract_edit_expected_two_lists), 0, 1, 0, 0},
  {&__pyx_kp_u_subtract_edit_line_441, __pyx_k_subtract_edit_line_441, sizeof(__pyx_k_subtract_edit_line_441), 0, 1, 0, 0},
  {&__pyx_kp_u_subtract_edit_subsequence_is_not, __pyx_k_subtract_edit_subsequence_is_not, sizeof(__pyx_k_subtract_edit_subsequence_is_not), 0, 1, 0, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 300, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cpp_levenshtein.pyx":242
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("inverse expected a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_inverse_expected_a_list_of_edit); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cpp_levenshtein.pyx":300
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("editops second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 *         return RfEditops(arg1, len1, len2).as_list()
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_editops_second_and_third_argumen); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cpp_levenshtein.pyx":345
 *         len2 = get_length_of_anything(arg3)
 *         if len1 == <size_t>-1 or len2 == <size_t>-1:
 *             raise ValueError("opcodes second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 *         return RfOpcodes(arg1, len1, len2).as_list()
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_opcodes_second_and_third_argumen); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cpp_levenshtein.pyx":399
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("matching_blocks first argument must be a List of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_matching_blocks_first_argument_m); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cpp_levenshtein.pyx":405
 *     len2 = get_length_of_anything(destination_string)
 *     if len1 == <size_t>-1 or len2 == <size_t>-1:
 *         raise ValueError("matching_blocks second and third argument must specify sizes")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_matching_blocks_second_and_third); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cpp_levenshtein.pyx":412
 *         if lev_editops_check_errors(len1, len2, n, ops):
 *             free(ops)
 *             raise ValueError("matching_blocks edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *         mblocks = lev_editops_matching_blocks(len1, len2, n, ops, &nmb)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_matching_blocks_edit_operations); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cpp_levenshtein.pyx":438
 *         return result
 * 
 *     raise TypeError("matching_blocks expected a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_matching_blocks_expected_a_list); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "cpp_levenshtein.pyx":477
 * 
 *     if not isinstance(edit_operations, list) or not isinstance(subsequence, list):
 *         raise TypeError("subtract_edit expected two lists of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     ns = <size_t>len(<list>subsequence)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_subtract_edit_expected_two_lists); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "cpp_levenshtein.pyx":485
 *     n = <size_t>len(<list>edit_operations)
 *     if not n:
 *         raise ValueError("subtract_edit subsequence is not a subsequence or is invalid")             # <<<<<<<<<<<<<<
 * 
 *     ops = extract_editops(edit_operations)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_subtract_edit_subsequence_is_not); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cpp_levenshtein.pyx":546
 * 
 *     if not isinstance(edit_operations, list):
 *         raise TypeError("apply_edit first argument must be a List of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     n = <size_t>len(<list>edit_operations)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_apply_edit_first_argument_must_b); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "cpp_levenshtein.pyx":564
 *             if lev_editops_check_errors(len1, len2, n, ops):
 *                 free(ops)
 *                 raise ValueError("apply_edit edit operations are invalid or inapplicable")             # <<<<<<<<<<<<<<
 * 
 *             s = <void*>lev_editops_apply[lev_byte](len1, <const lev_byte*>string1, len2, <const lev_byte*>string2,
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_apply_edit_edit_operations_are_i); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cpp_levenshtein.pyx":592
 *             return result
 * 
 *         raise TypeError("apply_edit first argument must be a list of edit operations")             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(source_string, str) and isinstance(destination_string, str):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_apply_edit_first_argument_must_b_2); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "cpp_levenshtein.pyx":638
 *         raise TypeError("apply_edit first argument must be a list of edit operations")
 * 
 *     raise TypeError("apply_edit expected two Strings or two Unicodes")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_apply_edit_expected_two_Strings); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "cpp_levenshtein.pyx":212
 *     return tuple_list
 * 
 * def inverse(edit_operations):             # <<<<<<<<<<<<<<
 *     """
 *     Invert the sense of an edit operation sequence.
 */
  __pyx_tuple__15 = PyTuple_Pack(5, __pyx_n_s_edit_operations, __pyx_n_s_n, __pyx_n_s_ops, __pyx_n_s_bops, __pyx_n_s_result); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_inverse, 212, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 212, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":266
 * 
 * 
 * def editops(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */
  __pyx_tuple__17 = PyTuple_Pack(9, __pyx_n_s_args, __pyx_n_s_n, __pyx_n_s_len1, __pyx_n_s_len2, __pyx_n_s_ops, __pyx_n_s_bops, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_arg3); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_editops, 266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 266, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":309
 * 
 * 
 * def opcodes(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */
  __pyx_tuple__19 = PyTuple_Pack(10, __pyx_n_s_args, __pyx_n_s_n, __pyx_n_s_nb, __pyx_n_s_len1, __pyx_n_s_len2, __pyx_n_s_ops, __pyx_n_s_bops, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_arg3); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_opcodes, 309, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 309, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":354
 * 
 * 
 * def matching_blocks(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Find identical blocks in two strings.
 */
  __pyx_tuple__21 = PyTuple_Pack(11, __pyx_n_s_edit_operations, __pyx_n_s_source_string, __pyx_n_s_destination_string, __pyx_n_s_n, __pyx_n_s_nmb, __pyx_n_s_len1, __pyx_n_s_len2, __pyx_n_s_ops, __pyx_n_s_bops, __pyx_n_s_mblocks, __pyx_n_s_result); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_matching_blocks, 354, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 354, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":441
 * 
 * 
 * def subtract_edit(edit_operations, subsequence):             # <<<<<<<<<<<<<<
 *     """
 *     Subtract an edit subsequence from a sequence.
 */
  __pyx_tuple__23 = PyTuple_Pack(9, __pyx_n_s_edit_operations, __pyx_n_s_subsequence, __pyx_n_s_n, __pyx_n_s_ns, __pyx_n_s_nr, __pyx_n_s_ops, __pyx_n_s_osub, __pyx_n_s_orem, __pyx_n_s_result); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_subtract_edit, 441, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 441, __pyx_L1_error)

  /* "cpp_levenshtein.pyx":508
 * 
 * 
 * def apply_edit(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Apply a sequence of edit operations to a string.
 */
  __pyx_tuple__25 = PyTuple_Pack(13, __pyx_n_s_edit_operations, __pyx_n_s_source_string, __pyx_n_s_destination_string, __pyx_n_s_n, __pyx_n_s_len1, __pyx_n_s_len2, __pyx_n_s_len3, __pyx_n_s_ops, __pyx_n_s_bops, __pyx_n_s_string1, __pyx_n_s_string2, __pyx_n_s_s, __pyx_n_s_result); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_danrui_Dataprep_pre_compil, __pyx_n_s_apply_edit, 508, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  #if CYTHON_USE_MODULE_STATE
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_Apply_a_sequence_of_edit_operat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_n_s_Editops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_kp_u_Find_identical_blocks_in_two_st) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_kp_u_Find_sequence_of_edit_operation) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_kp_u_Find_sequence_of_edit_operation_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_u_Invert_the_sense_of_an_edit_ope) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_MemoryError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_Opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_RfEditops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_RfOpcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_kp_u_Subtract_an_edit_subsequence_fr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_kp_u__14) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s__27) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_apply_edit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_kp_u_apply_edit_edit_operations_are_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_kp_u_apply_edit_expected_two_Strings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_kp_u_apply_edit_first_argument_must_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_u_apply_edit_first_argument_must_b_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_u_apply_edit_line_508) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s_arg1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_arg2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_arg3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_as_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_bops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_cpp_levenshtein) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_cstring) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_u_delete) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_destination_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_edit_operations) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_editops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_kp_u_editops_line_266) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_kp_u_editops_second_and_third_argumen) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_u_equal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_kp_s_home_danrui_Dataprep_pre_compil) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_u_insert) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_inverse) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_kp_u_inverse_expected_a_list_of_edit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_kp_u_inverse_line_212) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_len) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_len1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_len2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_len3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_matching_blocks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_kp_u_matching_blocks_edit_operations) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_kp_u_matching_blocks_expected_a_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_kp_u_matching_blocks_first_argument_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_kp_u_matching_blocks_line_354) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_kp_u_matching_blocks_second_and_third) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_mblocks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_nb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_nmb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_nr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_ns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_kp_u_opcodes_line_309) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_kp_u_opcodes_second_and_third_argumen) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_ops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_orem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_osub) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_pystring) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_rapidfuzz_distance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_rapidfuzz_distance_Levenshtein) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_u_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_rf_editops) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_rf_opcodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_source_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_string1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_string2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_subsequence) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_subtract_edit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_kp_u_subtract_edit_expected_two_lists) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_u_subtract_edit_line_441) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_u_subtract_edit_subsequence_is_not) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_USE_MODULE_STATE
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cpp_levenshtein(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cpp_levenshtein},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "cpp_levenshtein",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcpp_levenshtein(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcpp_levenshtein(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cpp_levenshtein(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cpp_levenshtein(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cpp_levenshtein(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_15cpp_levenshtein_OpcodeName __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cpp_levenshtein' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cpp_levenshtein", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cpp_levenshtein(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cpp_levenshtein) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cpp_levenshtein")) {
      if (unlikely((PyDict_SetItemString(modules, "cpp_levenshtein", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cpp_levenshtein.pyx":18
 * 
 * from rapidfuzz.distance import (
 *     Editops as RfEditops,             # <<<<<<<<<<<<<<
 *     Opcodes as RfOpcodes
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Editops);
  __Pyx_GIVEREF(__pyx_n_s_Editops);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Editops);
  __Pyx_INCREF(__pyx_n_s_Opcodes);
  __Pyx_GIVEREF(__pyx_n_s_Opcodes);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Opcodes);

  /* "cpp_levenshtein.pyx":17
 * from libc.stddef cimport wchar_t
 * 
 * from rapidfuzz.distance import (             # <<<<<<<<<<<<<<
 *     Editops as RfEditops,
 *     Opcodes as RfOpcodes
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_rapidfuzz_distance, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Editops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RfEditops, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RfOpcodes, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cpp_levenshtein.pyx":22
 * )
 * from rapidfuzz.distance.Levenshtein import (
 *     editops as rf_editops,             # <<<<<<<<<<<<<<
 *     opcodes as rf_opcodes
 * )
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_editops);
  __Pyx_GIVEREF(__pyx_n_s_editops);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_editops);
  __Pyx_INCREF(__pyx_n_s_opcodes);
  __Pyx_GIVEREF(__pyx_n_s_opcodes);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_opcodes);

  /* "cpp_levenshtein.pyx":21
 *     Opcodes as RfOpcodes
 * )
 * from rapidfuzz.distance.Levenshtein import (             # <<<<<<<<<<<<<<
 *     editops as rf_editops,
 *     opcodes as rf_opcodes
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_rapidfuzz_distance_Levenshtein, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_editops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rf_editops, __pyx_t_3) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_opcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rf_opcodes, __pyx_t_3) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":78
 * 
 * cdef OpcodeName opcode_names[4]
 * opcode_names[0] = OpcodeName(<PyObject*>"equal",   "equal",   strlen("equal"))             # <<<<<<<<<<<<<<
 * opcode_names[1] = OpcodeName(<PyObject*>"replace", "replace", strlen("replace"))
 * opcode_names[2] = OpcodeName(<PyObject*>"insert",  "insert",  strlen("insert"))
 */
  __pyx_t_4.pystring = ((PyObject *)__pyx_n_u_equal);
  __pyx_t_4.cstring = ((char const *)"equal");
  __pyx_t_4.len = strlen(((char const *)"equal"));
  (__pyx_v_15cpp_levenshtein_opcode_names[0]) = __pyx_t_4;

  /* "cpp_levenshtein.pyx":79
 * cdef OpcodeName opcode_names[4]
 * opcode_names[0] = OpcodeName(<PyObject*>"equal",   "equal",   strlen("equal"))
 * opcode_names[1] = OpcodeName(<PyObject*>"replace", "replace", strlen("replace"))             # <<<<<<<<<<<<<<
 * opcode_names[2] = OpcodeName(<PyObject*>"insert",  "insert",  strlen("insert"))
 * opcode_names[3] = OpcodeName(<PyObject*>"delete",  "delete",  strlen("delete"))
 */
  __pyx_t_4.pystring = ((PyObject *)__pyx_n_u_replace);
  __pyx_t_4.cstring = ((char const *)"replace");
  __pyx_t_4.len = strlen(((char const *)"replace"));
  (__pyx_v_15cpp_levenshtein_opcode_names[1]) = __pyx_t_4;

  /* "cpp_levenshtein.pyx":80
 * opcode_names[0] = OpcodeName(<PyObject*>"equal",   "equal",   strlen("equal"))
 * opcode_names[1] = OpcodeName(<PyObject*>"replace", "replace", strlen("replace"))
 * opcode_names[2] = OpcodeName(<PyObject*>"insert",  "insert",  strlen("insert"))             # <<<<<<<<<<<<<<
 * opcode_names[3] = OpcodeName(<PyObject*>"delete",  "delete",  strlen("delete"))
 * cdef size_t N_OPCODE_NAMES = 4
 */
  __pyx_t_4.pystring = ((PyObject *)__pyx_n_u_insert);
  __pyx_t_4.cstring = ((char const *)"insert");
  __pyx_t_4.len = strlen(((char const *)"insert"));
  (__pyx_v_15cpp_levenshtein_opcode_names[2]) = __pyx_t_4;

  /* "cpp_levenshtein.pyx":81
 * opcode_names[1] = OpcodeName(<PyObject*>"replace", "replace", strlen("replace"))
 * opcode_names[2] = OpcodeName(<PyObject*>"insert",  "insert",  strlen("insert"))
 * opcode_names[3] = OpcodeName(<PyObject*>"delete",  "delete",  strlen("delete"))             # <<<<<<<<<<<<<<
 * cdef size_t N_OPCODE_NAMES = 4
 * 
 */
  __pyx_t_4.pystring = ((PyObject *)__pyx_n_u_delete);
  __pyx_t_4.cstring = ((char const *)"delete");
  __pyx_t_4.len = strlen(((char const *)"delete"));
  (__pyx_v_15cpp_levenshtein_opcode_names[3]) = __pyx_t_4;

  /* "cpp_levenshtein.pyx":82
 * opcode_names[2] = OpcodeName(<PyObject*>"insert",  "insert",  strlen("insert"))
 * opcode_names[3] = OpcodeName(<PyObject*>"delete",  "delete",  strlen("delete"))
 * cdef size_t N_OPCODE_NAMES = 4             # <<<<<<<<<<<<<<
 * 
 * cdef size_t get_length_of_anything(o):
 */
  __pyx_v_15cpp_levenshtein_N_OPCODE_NAMES = 4;

  /* "cpp_levenshtein.pyx":212
 *     return tuple_list
 * 
 * def inverse(edit_operations):             # <<<<<<<<<<<<<<
 *     """
 *     Invert the sense of an edit operation sequence.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_1inverse, 0, __pyx_n_s_inverse, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inverse, __pyx_t_2) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":266
 * 
 * 
 * def editops(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_3editops, 0, __pyx_n_s_editops, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_editops, __pyx_t_2) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":309
 * 
 * 
 * def opcodes(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Find sequence of edit operations transforming one string to another.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_5opcodes, 0, __pyx_n_s_opcodes, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_opcodes, __pyx_t_2) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":354
 * 
 * 
 * def matching_blocks(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Find identical blocks in two strings.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_7matching_blocks, 0, __pyx_n_s_matching_blocks, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matching_blocks, __pyx_t_2) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":441
 * 
 * 
 * def subtract_edit(edit_operations, subsequence):             # <<<<<<<<<<<<<<
 *     """
 *     Subtract an edit subsequence from a sequence.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_9subtract_edit, 0, __pyx_n_s_subtract_edit, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subtract_edit, __pyx_t_2) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":508
 * 
 * 
 * def apply_edit(edit_operations, source_string, destination_string):             # <<<<<<<<<<<<<<
 *     """
 *     Apply a sequence of edit operations to a string.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_15cpp_levenshtein_11apply_edit, 0, __pyx_n_s_apply_edit, NULL, __pyx_n_s_cpp_levenshtein, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_apply_edit, __pyx_t_2) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cpp_levenshtein.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * # cython: binding=True
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_inverse_line_212, __pyx_kp_u_Invert_the_sense_of_an_edit_ope) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_editops_line_266, __pyx_kp_u_Find_sequence_of_edit_operation) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_opcodes_line_309, __pyx_kp_u_Find_sequence_of_edit_operation_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_matching_blocks_line_354, __pyx_kp_u_Find_identical_blocks_in_two_st) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_subtract_edit_line_441, __pyx_kp_u_Subtract_an_edit_subsequence_fr) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_apply_edit_line_508, __pyx_kp_u_Apply_a_sequence_of_edit_operat) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libc/stddef.pxd":1
 * # 7.17 Common definitions <stddef.h>             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<stddef.h>":
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cpp_levenshtein", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cpp_levenshtein");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#if _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__14);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    (void) spec;
    (void) type;
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    (void) module;
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    (void) module;
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__27));
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#if _MSV_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
